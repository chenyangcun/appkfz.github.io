<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[阳春面的博客]]></title>
  <subtitle><![CDATA[分享Android/IOS/Swift开发和互联网内容]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://aswifter.com//"/>
  <updated>2015-11-17T16:03:39.000Z</updated>
  <id>https://aswifter.com//</id>
  
  <author>
    <name><![CDATA[阳春面]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Android TabLayout重设Tab点击事件]]></title>
    <link href="https://aswifter.com/2015/11/18/tablayout-reset-tab-click-listener/"/>
    <id>https://aswifter.com/2015/11/18/tablayout-reset-tab-click-listener/</id>
    <published>2015-11-17T16:01:20.000Z</published>
    <updated>2015-11-17T16:03:39.000Z</updated>
    <content type="html"><![CDATA[<p>Android design支持库中提供的TabLayout默认把Tab的OnClickListener给写死了，但是在项目中有时候需要做一些控制处理，比如选中某一个Tab之前必须是先登录，未登录的情况需要跳转到登录界面。</p><p>我们可以通过给TabLayout中的TabView重设OnClickListener解决这个问题</p><h3 id="重新设置点击事件">重新设置点击事件</h3><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">viewPager.setAdapter<span class="params">(pagerAdapter)</span>;</span><br><span class="line">tabLayout.setupWithViewPager<span class="params">(viewPager)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="params">(int i = <span class="number">0</span>; i &lt; tabLayout.getTabCount<span class="params">()</span>; i++)</span> &#123;</span><br><span class="line">    TabLayout.Tab tab = tabLayout.getTabAt<span class="params">(i)</span>;</span><br><span class="line">    <span class="keyword">if</span> <span class="params">(tab != null)</span> &#123;</span><br><span class="line">        tab.setCustomView<span class="params">(pagerAdapter.getTabView<span class="params">(i)</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> <span class="params">(tab.getCustomView<span class="params">()</span> != null)</span> &#123;</span><br><span class="line">            View tabView = <span class="params">(View)</span> tab.getCustomView<span class="params">()</span>.getParent<span class="params">()</span>;</span><br><span class="line">            tabView.setTag<span class="params">(i)</span>;</span><br><span class="line">            tabView.setOnClickListener<span class="params">(mTabOnClickListener)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">viewPager.setCurrentItem<span class="params">(<span class="number">1</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="处理点击事件">处理点击事件</h3><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> View.OnClickListener mTabOnClickListener = <span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">       <span class="annotation">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> pos = (<span class="keyword">int</span>) view.getTag();</span><br><span class="line">           <span class="keyword">if</span> (pos == <span class="number">0</span>) &#123;</span><br><span class="line">               Toast.makeText(BottomTabActivity.<span class="keyword">this</span>, <span class="string">"您还没有登录"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">               <span class="comment">//<span class="doctag"><span class="keyword">TODO</span></span> 跳转到登录界面</span></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               TabLayout.Tab tab = tabLayout.getTabAt(pos);</span><br><span class="line">               <span class="keyword">if</span> (tab != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   tab.select();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>Android design支持库中提供的TabLayout默认把Tab的OnClickListener给写死了，但是在项目中有时候需要做一些控制处理，比如选中某一个Tab之前必须是先登录，未登录的情况需要跳转到登录界面。</p><p>我们可以通过给TabLayout中的T]]>
    </summary>
    
      <category term="Android" scheme="https://aswifter.com/tags/Android/"/>
    
      <category term="TabLayout" scheme="https://aswifter.com/tags/TabLayout/"/>
    
      <category term="Android" scheme="https://aswifter.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Windows下搭建React Native开发环境]]></title>
    <link href="https://aswifter.com/2015/11/17/set-up-react-native-windows/"/>
    <id>https://aswifter.com/2015/11/17/set-up-react-native-windows/</id>
    <published>2015-11-17T13:56:39.000Z</published>
    <updated>2015-11-17T14:02:08.000Z</updated>
    <content type="html"><![CDATA[<p>在Facebook官方的说明里, 开发React Native应用提示需要OS X系统，<br>所以一直以为不能在Windows下开发，其实React Native是基于Nodejs环境的，<br>如果我们只用React Native开发Android应用，完全可以在Windows进行。</p><p>以下我按步骤介绍如何在Windows下搭建React Native开发环境：</p><h3 id="安装Nodejs">安装Nodejs</h3><p>请到<a href="https://nodejs.org/en/" target="_blank" rel="external">官网</a>下载Windows版本的Nodejs，<br>我是直接下载5.0版本，React Native的要求是4.0以上都可以支持。</p><h3 id="安装react-native-cli">安装react-native-cli</h3><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g react-<span class="reserved">native</span>-cli</span><br></pre></td></tr></table></figure><h3 id="初始化项目">初始化项目</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">react-<span class="keyword">native</span> init AwesomeProject</span><br></pre></td></tr></table></figure><p>init项目时，我这边卡住了很久才初始化完成，可能是下载node_modules太耗时间了。<br>如果你也在init时卡住的话，可以直接clone我初始化好的项目</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">git clone <span class="string">https:</span><span class="comment">//github.com/chenyangcun/AwesomeProject.git</span></span><br></pre></td></tr></table></figure><p>代码下载完成后，请将项目目录下的node_modules.zip解压到当前目录。</p><blockquote><p>注：如果你的网络较快的话，也可以用<code>npm install</code>下载node_modules</p></blockquote><h3 id="配置环境变量">配置环境变量</h3><p>请设置环境变量ANDROID_HOME指向Android SDK的目录</p><p><img src="http://7xjq5l.com1.z0.glb.clouddn.com/18501-ce75c1b0ac753f27.png" alt=""><br><a id="more"></a></p><h3 id="安装Genymotion模拟器">安装Genymotion模拟器</h3><p>请到<a href="https://www.genymotion.com/" target="_blank" rel="external">Genymotion</a>官方下载安装Genymotion模拟器，并创建Android emulator。请参考facebook的<a href="https://facebook.github.io/react-native/docs/android-setup.html" target="_blank" rel="external">说明</a></p><h3 id="启动">启动</h3><p>1.首先启动React Native Server<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">react-<span class="keyword">native</span> start</span><br></pre></td></tr></table></figure></p><p>2.重新开一个终端(cmd), 切换到项目目录安装APP<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">cd android</span><br><span class="line">gradlew<span class="class">.bat</span> installDebug</span><br></pre></td></tr></table></figure></p><blockquote><p>执行<code>gradlew.bat installDebug</code>时，请先开启Genymotion模拟器</p></blockquote><p>安装成功后，在Genymotion里手动打开APP ，一切正常的话，你就可以看到如下画面。<br>这时Windows下的React Native开发环境就已经搭建完成。<br><img src="http://7xjq5l.com1.z0.glb.clouddn.com/18501-e2a614175a07781c.jpg" alt=""></p>]]></content>
    <summary type="html">
    <![CDATA[<p>在Facebook官方的说明里, 开发React Native应用提示需要OS X系统，<br>所以一直以为不能在Windows下开发，其实React Native是基于Nodejs环境的，<br>如果我们只用React Native开发Android应用，完全可以在Windows进行。</p><p>以下我按步骤介绍如何在Windows下搭建React Native开发环境：</p><h3 id=安装Nodejs>安装Nodejs</h3><p>请到<a href="https://nodejs.org/en/">官网</a>下载Windows版本的Nodejs，<br>我是直接下载5.0版本，React Native的要求是4.0以上都可以支持。</p><h3 id=安装react-native-cli>安装react-native-cli</h3><figure class="highlight coffeescript"><table><tr><td class=code><pre><span class=line><span class=built_in>npm</span> install -g react-<span class=reserved>native</span>-cli</span><br></pre></td></tr></table></figure><h3 id=初始化项目>初始化项目</h3><figure class="highlight actionscript"><table><tr><td class=code><pre><span class=line>react-<span class=keyword>native</span> init AwesomeProject</span><br></pre></td></tr></table></figure><p>init项目时，我这边卡住了很久才初始化完成，可能是下载node_modules太耗时间了。<br>如果你也在init时卡住的话，可以直接clone我初始化好的项目</p><figure class="highlight groovy"><table><tr><td class=code><pre><span class=line>git clone <span class=string>https:</span><span class=comment>//github.com/chenyangcun/AwesomeProject.git</span></span><br></pre></td></tr></table></figure><p>代码下载完成后，请将项目目录下的node_modules.zip解压到当前目录。</p><blockquote><p>注：如果你的网络较快的话，也可以用<code>npm install</code>下载node_modules</p></blockquote><h3 id=配置环境变量>配置环境变量</h3><p>请设置环境变量ANDROID_HOME指向Android SDK的目录</p><p><img src=http://7xjq5l.com1.z0.glb.clouddn.com/18501-ce75c1b0ac753f27.png alt=""><br>]]>
    
    </summary>
    
      <category term="React-Native" scheme="https://aswifter.com/tags/React-Native/"/>
    
      <category term="Windows" scheme="https://aswifter.com/tags/Windows/"/>
    
      <category term="Android" scheme="https://aswifter.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[(译)掌握 Coordinator Layout]]></title>
    <link href="https://aswifter.com/2015/11/12/mastering-coordinator/"/>
    <id>https://aswifter.com/2015/11/12/mastering-coordinator/</id>
    <published>2015-11-11T16:19:15.000Z</published>
    <updated>2015-11-11T16:51:29.000Z</updated>
    <content type="html"><![CDATA[<p>在今年的 <a href="https://www.youtube.com/watch?v=7V-fIGMDsmE" target="_blank" rel="external">Google I/O 15</a>上Google 发布了 <a href="http://android-developers.blogspot.com.es/2015/05/android-design-support-library.html" target="_blank" rel="external">新的支持库</a> ，其中有好几个组件与<a href="https://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="external">Material Design设计</a>密切相关,在这些新组件中，你可以找到有几个类似于<em>ViewGroup</em> 的控件，如 AppbarLayout,CollapsingToolbarLayout 和 CoordinatorLayout.<br>这些<em>ViewGroups</em> 控件提供了非常强大的功能，我决定写一篇文章来介绍相关的配置和技巧。</p><h2 id="CoordinatorLayout">CoordinatorLayout</h2><p>顾名思义，这个控件的目的就是协调它里面View的行为。</p><p>请看下面的图片：</p><p><img src="http://androcode.es/wp-content/uploads/2015/10/simple_coordinator.gif" alt=""></p><p>在这个例子中我们可以看到View之间是如何相互配合的，View会根据其他View的变动做相应的变化。</p><a id="more"></a><p>以下是CoordinatorLayout的简单使用例子：<br><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">&lt;?xml <span class="variable">version=</span><span class="string">"1.0"</span> <span class="variable">encoding=</span><span class="string">"utf-8"</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;android.support.design.widget.CoordinatorLayout</span><br><span class="line">    xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    xmlns:<span class="variable">app=</span><span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">    android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span></span><br><span class="line">    android:<span class="variable">background=</span><span class="string">"@android:color/background_light"</span></span><br><span class="line">    android:<span class="variable">fitsSystemWindows=</span><span class="string">"true"</span></span><br><span class="line">    &gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.AppBarLayout</span><br><span class="line">        android:<span class="variable">id=</span><span class="string">"@+id/main.appbar"</span></span><br><span class="line">        android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">        android:<span class="variable">layout_height=</span><span class="string">"300dp"</span></span><br><span class="line">        android:<span class="variable">theme=</span><span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></span><br><span class="line">        android:<span class="variable">fitsSystemWindows=</span><span class="string">"true"</span></span><br><span class="line">        &gt;</span><br><span class="line"></span><br><span class="line">        &lt;android.support.design.widget.CollapsingToolbarLayout</span><br><span class="line">            android:<span class="variable">id=</span><span class="string">"@+id/main.collapsing"</span></span><br><span class="line">            android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">            android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span></span><br><span class="line">            app:<span class="variable">layout_scrollFlags=</span><span class="string">"scroll|exitUntilCollapsed"</span></span><br><span class="line">            android:<span class="variable">fitsSystemWindows=</span><span class="string">"true"</span></span><br><span class="line">            app:<span class="variable">contentScrim=</span><span class="string">"?attr/colorPrimary"</span></span><br><span class="line">            app:<span class="variable">expandedTitleMarginStart=</span><span class="string">"48dp"</span></span><br><span class="line">            app:<span class="variable">expandedTitleMarginEnd=</span><span class="string">"64dp"</span></span><br><span class="line">            &gt;</span><br><span class="line"></span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:<span class="variable">id=</span><span class="string">"@+id/main.backdrop"</span></span><br><span class="line">                android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">                android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span></span><br><span class="line">                android:<span class="variable">scaleType=</span><span class="string">"centerCrop"</span></span><br><span class="line">                android:<span class="variable">fitsSystemWindows=</span><span class="string">"true"</span></span><br><span class="line">                android:<span class="variable">src=</span><span class="string">"@drawable/material_flat"</span></span><br><span class="line">                app:<span class="variable">layout_collapseMode=</span><span class="string">"parallax"</span></span><br><span class="line">                /&gt;</span><br><span class="line"></span><br><span class="line">            &lt;android.support.v7.widget.Toolbar</span><br><span class="line">                android:<span class="variable">id=</span><span class="string">"@+id/main.toolbar"</span></span><br><span class="line">                android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">                android:<span class="variable">layout_height=</span><span class="string">"?attr/actionBarSize"</span></span><br><span class="line">                app:<span class="variable">popupTheme=</span><span class="string">"@style/ThemeOverlay.AppCompat.Light"</span></span><br><span class="line">                app:<span class="variable">layout_collapseMode=</span><span class="string">"pin"</span></span><br><span class="line">                /&gt;</span><br><span class="line">        &lt;/android.support.design.widget.CollapsingToolbarLayout&gt;</span><br><span class="line">    &lt;/android.support.design.widget.AppBarLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v4.widget.NestedScrollView</span><br><span class="line">        android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">        android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span></span><br><span class="line">        app:<span class="variable">layout_behavior=</span><span class="string">"@string/appbar_scrolling_view_behavior"</span></span><br><span class="line">        &gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">            android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span></span><br><span class="line">            android:<span class="variable">textSize=</span><span class="string">"20sp"</span></span><br><span class="line">            android:<span class="variable">lineSpacingExtra=</span><span class="string">"8dp"</span></span><br><span class="line">            android:<span class="variable">text=</span><span class="string">"@string/lorem"</span></span><br><span class="line">            android:<span class="variable">padding=</span><span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">            /&gt;</span><br><span class="line">    &lt;/android.support.v4.widget.NestedScrollView&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.FloatingActionButton</span><br><span class="line">        android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span></span><br><span class="line">        android:<span class="variable">layout_width=</span><span class="string">"wrap_content"</span></span><br><span class="line">        android:<span class="variable">layout_margin=</span><span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">        android:<span class="variable">src=</span><span class="string">"@drawable/ic_comment_24dp"</span></span><br><span class="line">        app:<span class="variable">layout_anchor=</span><span class="string">"@id/main.appbar"</span></span><br><span class="line">        app:<span class="variable">layout_anchorGravity=</span><span class="string">"bottom|right|end"</span></span><br><span class="line">        /&gt;</span><br><span class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure></p><p>我们看一下这个layout结构，<code>CoordinatorLayout</code>包含3个子控件：<br><code>AppbarLayout</code>， <em>scrolleable</em> view 和 <code>anchoredFloatingActionBar</code>。<br><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;CoordinatorLayout&gt;</span></span><br><span class="line">    <span class="tag">&lt;AppbarLayout/&gt;</span></span><br><span class="line">    <span class="tag">&lt;scrollableView/&gt;</span></span><br><span class="line">    <span class="tag">&lt;FloatingActionButton/&gt;</span></span><br><span class="line"><span class="tag">&lt;/CoordinatorLayout&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="AppBarLayout">AppBarLayout</h2><p>AppBarLayout 是继承LinerLayout实现的一个ViewGroup容器组件,<br>默认的AppBarLayout是垂直方向的, 可以管理其中的控件在内容滚动时的行为。</p><p>这听起来可能有点令人困惑，我想一张图片可以胜过千言万语，特别时GIF图片：<br><img src="http://androcode.es/wp-content/uploads/2015/10/2015-10-27-03_51_37.gif" alt=""></p><p><code>AppBarLayout</code>在这个例子中时蓝色的View，在其下放置了一个可以缩放的图片，其中包含一个<code>Toolbar</code>，<br>一个<code>LinearLayout</code>（包含标题和副标题），以及一个<code>TabLayout</code>。</p><p>我们可以通过设置<code>layout_scrollFlags</code>参数，来控制<code>AppBarLayout</code>中的控件行为。<br>在我们的这个例子中，大部分View的<code>layout_scrollFlags</code>都设置为<code>scroll</code>，如果没有设置的话，<br>当可滚动的View进行滚动时，这些没设置为<code>scroll</code>的View位置会保持不变；</p><p><code>layout_scrollFlags</code>设置上<code>snap</code>值则可以避免进入动画中间状态（ <em>mid-animation-states</em>），<br>这意味着动画会一直持续到View完全显示或完全隐藏为止。</p><p><code>LinearLayout</code>其中包含了一个标题和一个副标题，当用户向上移动时<code>LinearLayout</code>是一直显示的，直到移出屏幕（enterAlways）;</p><p><code>TabLayout</code>会一直是可见的，因为我们没有在TabLayout上设置任何flag。</p><p>正如你所见，<code>AppbarLayout</code>的强大管理能力是通过在View上设置不同scroll flags实现的。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">AppBarLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">CollapsingToolbarLayout</span></span><br><span class="line">        <span class="attribute">app:layout_scrollFlags</span>=<span class="value">"scroll|snap"</span></span><br><span class="line">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">Toolbar</span></span><br><span class="line">        <span class="attribute">app:layout_scrollFlags</span>=<span class="value">"scroll|snap"</span></span><br><span class="line">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">        <span class="attribute">android:id</span>=<span class="value">"+id/title_container"</span></span><br><span class="line">        <span class="attribute">app:layout_scrollFlags</span>=<span class="value">"scroll|enterAlways"</span></span><br><span class="line">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">TabLayout</span> /&gt;</span> <span class="comment">&lt;!-- no flags --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">AppBarLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些参数的设置请参考 <a href="https://developer.android.com/intl/es/reference/android/support/design/widget/AppBarLayout.LayoutParams.html#CONSTANTS" target="_blank" rel="external">Google Developers docs</a>。<br>不过我建议还是通过代码练习来掌握它。我在文章的末尾提供了几个Github上的例子。</p><h3 id="AppbarLayout_flags">AppbarLayout flags</h3><p><code>SCROLL_FLAG_ENTER_ALWAYS</code>: 当任何向下滚动事件发生时, View都会移入 , 不管scrolling view 是否正在滚动。</p><p><code>SCROLL_FLAG_ENTER_ALWAYS_COLLAPSED</code>: ‘enterAlways’的附加标识，它使得returning view恢复到指定的最小高度后才开始显示，然后再慢慢展开。</p><p><code>SCROLL_FLAG_EXIT_UNTIL_COLLAPSED</code>: 但向上移出屏幕时，View会一直收缩到最小高度后，再移出屏幕。</p><p><code>SCROLL_FLAG_SCROLL</code>: View 会根据滚动事件进行移动。</p><p><code>SCROLL_FLAG_SNAP</code>: 但滚动结束时，如果View只有部分可见，它将会自动滑动到最近的边界（完全可见或完全隐藏）</p><h2 id="CoordinatorLayout_Behaviors">CoordinatorLayout Behaviors</h2><p>让我们做一些测试，打开Android Studio（&gt;= 1.4），根据模板<em>Scrolling Activity</em>创建一个项目，<br>不需要修改任何代码，以下就是运行后的界面：<br><img src="http://androcode.es/wp-content/uploads/2015/10/2015-10-27-03_59_27.gif" alt=""></p><p>如果我们查看生成的代码，不管layouts或java类中我们都不能找到Fab在滚动时变化的动画，为什么呢？</p><p>答案在<code>FloatingActionButton</code>的源代码里，自动 Android Studio v1.2 加入了java反编译功能，<br>我们使用<code>ctrl/cmd + click</code>可以查看源码，看看到底发生了什么：<br><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * Copyright (C) 2015 The Android Open Source Project</span><br><span class="line"> *</span><br><span class="line"> *  Floating action buttons are used for a</span><br><span class="line"> *  special type of promoted action.</span><br><span class="line"> *  They are distinguished by a circled icon</span><br><span class="line"> *  floating above the UI and have special motion behaviors</span><br><span class="line"> *  related to morphing, launching, and the transferring anchor point.</span><br><span class="line"> *</span><br><span class="line"> *  blah.. blah..</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@CoordinatorLayout</span>.<span class="type">DefaultBehavior</span>(</span><br><span class="line">    <span class="type">FloatingActionButton</span>.<span class="type">Behavior</span>.<span class="keyword">class</span>)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">FloatingActionButton</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">ImageButton</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    public static <span class="class"><span class="keyword">class</span> <span class="title">Behavior</span></span><br><span class="line"></span>        <span class="keyword">extends</span> <span class="type">CoordinatorLayout</span>.<span class="type">Behavior</span>&lt;<span class="type">FloatingActionButton</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> boolean updateFabVisibility(</span><br><span class="line">           <span class="type">CoordinatorLayout</span> parent, <span class="type">AppBarLayout</span> appBarLayout,</span><br><span class="line">           <span class="type">FloatingActionButton</span> child &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (a long condition) &#123;</span><br><span class="line">                <span class="comment">// If the anchor's bottom is below the seam,</span></span><br><span class="line">                <span class="comment">// we'll animate our FAB out</span></span><br><span class="line">                child.hide();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Else, we'll animate our FAB back in</span></span><br><span class="line">                child.show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>负责缩放动画的是design library新引入的元素叫做<code>Behavior</code>, 在这里是<code>CoordinatorLayout.Behavior&lt;FloatingAcctionButton&gt;</code>, 它根据一些滚动条件，判断是否显示FAB。</p><h3 id="SwipeDismissBehavior">SwipeDismissBehavior</h3><p>深入design support library的代码，我们会发现一个新的类：SwipeDismissBehavior，使用这个Behavior，<br>我们可以很容易的使用<code>CoordinatorLayout</code>实现滑动删除功能:<br><img src="http://androcode.es/wp-content/uploads/2015/10/hammerheadLMY48Msaulmm10242015161844.gif" alt=""><br><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_swipe_behavior);</span><br><span class="line">    mCardView = (CardView) findViewById(R.id.swype_card);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> SwipeDismissBehavior&lt;CardView&gt; swipe</span><br><span class="line">        = <span class="keyword">new</span> SwipeDismissBehavior();</span><br><span class="line"></span><br><span class="line">        swipe.setSwipeDirection(</span><br><span class="line">            SwipeDismissBehavior.SWIPE_DIRECTION_ANY);</span><br><span class="line"></span><br><span class="line">        swipe.setListener(</span><br><span class="line">            <span class="keyword">new</span> SwipeDismissBehavior.OnDismissListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDismiss</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(SwipeBehaviorExampleActivity.<span class="keyword">this</span>,</span><br><span class="line">                    <span class="string">"Card swiped !!"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onDragStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        LayoutParams coordinatorParams =</span><br><span class="line">            (LayoutParams) mCardView.getLayoutParams();</span><br><span class="line"></span><br><span class="line">        coordinatorParams.setBehavior(swipe);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="Custom_Behaviors">Custom Behaviors</h2><p>创建自定义Behaviors，并没有想象的那么难，首先我们得搞清楚两个核心元素 <strong>child</strong> 和 <strong>dependency</strong>.<br><img src="http://androcode.es/wp-content/uploads/2015/10/Screen-Shot-2015-10-27-at-04.42.37-e1445917457348.png" alt=""></p><h3 id="Childs_and_dependencies">Childs and dependencies</h3><p><strong>child</strong> 是指需要应用behavior的View ，<strong>dependency</strong> 担任触发behavior的角色，并与child进行互动。<br>在这个例子中， <strong>child</strong> 是ImageView， <strong>dependency</strong> 是Toolbar，如果Toolbar发生移动，ImageView也会做相应的移动。</p><p><img src="http://androcode.es/wp-content/uploads/2015/10/2015-10-27-04_30_50.gif" alt=""></p><p>现在我们已经知道概念了，接着我们看看怎么实现，<br>第一步我们需要继承CoordinatorLayout.Behavior<t>，T是指某一个View，<br>在我们的例子中是<em>ImageView</em>， 继承后，我们必须实现以下2个方法:</t></p><ul><li>layoutDependsOn</li><li>onDependentViewChanged</li></ul><p><code>layoutDependsOn</code>方法在每次layout发生变化时都会调用，我们需要在dependency控件发生变化时返回True，在我们的例子中是用户在屏幕上滑动时（因为Toolbar发生了移动），然后我们需要让child做出相应的反应。</p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(     </span><br><span class="line">     CoordinatorLayout parent,</span><br><span class="line">     CircleImageView, child,</span><br><span class="line">     View dependency)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> dependency <span class="keyword">instanceof</span> Toolbar;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>一旦<code>layoutDependsOn</code>返回了True，第二个方法<code>onDependentViewChanged</code>就会被调用，<br>在这个方法里我们需要实现动画，转场等效果。</p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(</span><br><span class="line">      CoordinatorLayout parent,</span><br><span class="line">      CircleImageView avatar,</span><br><span class="line">      View dependency)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      modifyAvatarDependingDependencyState(avatar, dependency);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">modifyAvatarDependingDependencyState</span><span class="params">(</span><br><span class="line">    CircleImageView avatar, View dependency)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  avatar.setY(dependency.getY());</span></span><br><span class="line">        <span class="comment">//  avatar.setBlahBlat(dependency.blah / blah);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>整合后的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AvatarImageBehavior</span></span><br><span class="line">   <span class="keyword">extends</span> <span class="title">CoordinatorLayout</span>.<span class="title">Behavior</span>&lt;<span class="title">CircleImageView</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(</span><br><span class="line">    CoordinatorLayout parent,</span><br><span class="line">    CircleImageView, child,</span><br><span class="line">    View dependency)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dependency <span class="keyword">instanceof</span> Toolbar;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(   </span><br><span class="line">    CoordinatorLayout parent,</span><br><span class="line">    CircleImageView avatar,</span><br><span class="line">    View dependency)</span> </span>&#123;</span><br><span class="line">      modifyAvatarDependingDependencyState(avatar, dependency);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">modifyAvatarDependingDependencyState</span><span class="params">(</span><br><span class="line">    CircleImageView avatar, View dependency)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  avatar.setY(dependency.getY());</span></span><br><span class="line">        <span class="comment">//  avatar.setBlahBlah(dependency.blah / blah);</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Resources">Resources</h2><ul><li><a href="https://github.com/saulmm/CoordinatorBehaviorExample" target="_blank" rel="external">Coordinator Behavior Example</a> - Github</li><li><a href="https://github.com/saulmm/CoordinatorExamples" target="_blank" rel="external">Coordinator Examples</a> - Github</li><li><a href="https://lab.getbase.com/introduction-to-coordinator-layout-on-android/" target="_blank" rel="external">Introduction to coordinator layout on Android</a> - Grzesiek Gajewski</li></ul><blockquote><p>本文译自：<a href="http://saulmm.github.io/mastering-coordinator/" target="_blank" rel="external">http://saulmm.github.io/mastering-coordinator/</a></p></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<p>在今年的 <a href="https://www.youtube.com/watch?v=7V-fIGMDsmE">Google I/O 15</a>上Google 发布了 <a href=http://android-developers.blogspot.com.es/2015/05/android-design-support-library.html>新的支持库</a> ，其中有好几个组件与<a href=https://www.google.com/design/spec/material-design/introduction.html>Material Design设计</a>密切相关,在这些新组件中，你可以找到有几个类似于<em>ViewGroup</em> 的控件，如 AppbarLayout,CollapsingToolbarLayout 和 CoordinatorLayout.<br>这些<em>ViewGroups</em> 控件提供了非常强大的功能，我决定写一篇文章来介绍相关的配置和技巧。</p><h2 id=CoordinatorLayout>CoordinatorLayout</h2><p>顾名思义，这个控件的目的就是协调它里面View的行为。</p><p>请看下面的图片：</p><p><img src=http://androcode.es/wp-content/uploads/2015/10/simple_coordinator.gif alt=""></p><p>在这个例子中我们可以看到View之间是如何相互配合的，View会根据其他View的变动做相应的变化。</p>]]>
    
    </summary>
    
      <category term="Material Design" scheme="https://aswifter.com/tags/Material-Design/"/>
    
      <category term="android" scheme="https://aswifter.com/tags/android/"/>
    
      <category term="android" scheme="https://aswifter.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 6.0 运行时权限处理]]></title>
    <link href="https://aswifter.com/2015/11/04/android-6-permission/"/>
    <id>https://aswifter.com/2015/11/04/android-6-permission/</id>
    <published>2015-11-04T14:26:17.000Z</published>
    <updated>2015-11-05T15:36:18.000Z</updated>
    <content type="html"><![CDATA[<h2 id="运行时权限介绍">运行时权限介绍</h2><p>Android 6.0在我们原有的AndroidManifest.xml声明权限的基础上，<br>又新增了运行时权限动态检测，以下权限都需要在运行时判断：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">身体传感器</span><br><span class="line">日历</span><br><span class="line">摄像头</span><br><span class="line">通讯录</span><br><span class="line">地理位置</span><br><span class="line">麦克风</span><br><span class="line">电话</span><br><span class="line">短信</span><br><span class="line">存储空间</span><br></pre></td></tr></table></figure></p><h2 id="运行时权限处理">运行时权限处理</h2><p>Android6.0系统默认为targetSdkVersion小于23的应用默认授予了所申请的所有权限，<br>所以如果你以前的APP设置的targetSdkVersion低于23，在运行时也不会崩溃，<br>但这也只是一个临时的救急策略，用户还是可以在设置中取消授予的权限。</p><ul><li>声明目标SDK版本<br>我们需要在build.gradle中声明targetSdkVersion为23<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="title">android</span> &#123;</span><br><span class="line">    <span class="title">compileSdkVersion</span> <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.1"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        <span class="title">applicationId</span> <span class="string">"com.yourcomany.app</span><br><span class="line">        minSdkVersion 18</span><br><span class="line">        targetSdkVersion 23</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName "</span><span class="number">1</span>.<span class="number">0</span><span class="string">"</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>检查并申请权限<br>我们需要在用到权限的地方，每次都检查是否APP已经拥有权限，<br>比如我们有一个下载功能，需要写SD卡的权限，<br>我们在写入之前检查是否有WRITE_EXTERNAL_STORAGE权限，没有则申请权限</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)</span><br><span class="line">        != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">    <span class="comment">//申请WRITE_EXTERNAL_STORAGE权限</span></span><br><span class="line">    ActivityCompat.requestPermissions(<span class="keyword">this</span>, <span class="keyword">new</span> <span class="built_in">String</span>[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,</span><br><span class="line">            WRITE_EXTERNAL_STORAGE_REQUEST_CODE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>请求权限后，系统会弹出请求权限的Dialog</p></li></ul><p><img src="http://7xjq5l.com1.z0.glb.clouddn.com/18501-06bc037ab77c9c62.png" alt=""></p><ul><li><p>用户选择允许或拒绝后，会回调onRequestPermissionsResult方法, 该方法类似于onActivityResult</p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">    doNext(requestCode,grantResults);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们接着需要根据requestCode和grantResults(授权结果)做相应的后续处理</p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">doNext</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (requestCode == WRITE_EXTERNAL_STORAGE_REQUEST_CODE) &#123;</span><br><span class="line">           <span class="keyword">if</span> (grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">               <span class="comment">// Permission Granted</span></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// Permission Denied</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Fragment中运行时权限的特殊处理">Fragment中运行时权限的特殊处理</h2><ul><li><p>在Fragment中申请权限，不要使用ActivityCompat.requestPermissions, 直接使用Fragment的requestPermissions方法，否则会回调到Activity的onRequestPermissionsResult</p></li><li><p>如果在Fragment中嵌套Fragment，在子Fragment中使用requestPermissions方法，onRequestPermissionsResult不会回调回来，建议使用getParentFragment().requestPermissions方法，<br>这个方法会回调到父Fragment中的onRequestPermissionsResult，加入以下代码可以把回调透传到子Fragment</p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">    List&lt;Fragment&gt; fragments = getChildFragmentManager().getFragments();</span><br><span class="line">    <span class="keyword">if</span> (fragments != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Fragment fragment : fragments) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fragment != <span class="keyword">null</span>) &#123;</span><br><span class="line">                fragment.onRequestPermissionsResult(requestCode,permissions,grantResults);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="相关开源项目">相关开源项目</h2><ul><li><p><strong><a href="https://github.com/hotchemi/PermissionsDispatcher" target="_blank" rel="external">PermissionsDispatcher</a></strong><br>使用标注的方式，动态生成类处理运行时权限，目前还不支持嵌套Fragment。</p></li><li><p><strong><a href="https://github.com/tbruyelle/RxPermissions" target="_blank" rel="external">RxPermissions</a></strong><br>基于RxJava的运行时权限检测框架</p></li><li><p><strong><a href="https://github.com/anthonycr/Grant" target="_blank" rel="external">Grant</a></strong><br>简化运行时权限的处理，比较灵活</p></li><li><p><strong><a href="https://github.com/googlesamples/android-RuntimePermissions" target="_blank" rel="external">android-RuntimePermissions</a></strong><br>Google官方的例子</p></li></ul><h2 id="附录">附录</h2><p>以下权限只需要在AndroidManifest.xml中声明即可使用<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">android<span class="class">.permission</span><span class="class">.ACCESS_LOCATION_EXTRA_COMMANDS</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.ACCESS_NETWORK_STATE</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.ACCESS_NOTIFICATION_POLICY</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.ACCESS_WIFI_STATE</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.ACCESS_WIMAX_STATE</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.BLUETOOTH</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.BLUETOOTH_ADMIN</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.BROADCAST_STICKY</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.CHANGE_NETWORK_STATE</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.CHANGE_WIFI_MULTICAST_STATE</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.CHANGE_WIFI_STATE</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.CHANGE_WIMAX_STATE</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.DISABLE_KEYGUARD</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.EXPAND_STATUS_BAR</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.FLASHLIGHT</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.GET_ACCOUNTS</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.GET_PACKAGE_SIZE</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.INTERNET</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.KILL_BACKGROUND_PROCESSES</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.MODIFY_AUDIO_SETTINGS</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.NFC</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.READ_SYNC_SETTINGS</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.READ_SYNC_STATS</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.RECEIVE_BOOT_COMPLETED</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.REORDER_TASKS</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.REQUEST_INSTALL_PACKAGES</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.SET_TIME_ZONE</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.SET_WALLPAPER</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.SET_WALLPAPER_HINTS</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.SUBSCRIBED_FEEDS_READ</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.TRANSMIT_IR</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.USE_FINGERPRINT</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.VIBRATE</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.WAKE_LOCK</span></span><br><span class="line">android<span class="class">.permission</span><span class="class">.WRITE_SYNC_SETTINGS</span></span><br><span class="line">com<span class="class">.android</span><span class="class">.alarm</span><span class="class">.permission</span><span class="class">.SET_ALARM</span></span><br><span class="line">com<span class="class">.android</span><span class="class">.launcher</span><span class="class">.permission</span><span class="class">.INSTALL_SHORTCUT</span></span><br><span class="line">com<span class="class">.android</span><span class="class">.launcher</span><span class="class">.permission</span><span class="class">.UNINSTALL_SHORTCUT</span></span><br></pre></td></tr></table></figure></p>]]></content>
    <summary type="html">
    <![CDATA[<h2 id=运行时权限介绍>运行时权限介绍</h2><p>Android 6.0在我们原有的AndroidManifest.xml声明权限的基础上，<br>又新增了运行时权限动态检测，以下权限都需要在运行时判断：<br><figure class=highlight><table><tr><td class=code><pre><span class=line>身体传感器</span><br><span class=line>日历</span><br><span class=line>摄像头</span><br><span class=line>通讯录</span><br><span class=line>地理位置</span><br><span class=line>麦克风</span><br><span class=line>电话</span><br><span class=line>短信</span><br><span class=line>存储空间</span><br></pre></td></tr></table></figure></p><h2 id=运行时权限处理>运行时权限处理</h2><p>Android6.0系统默认为targetSdkVersion小于23的应用默认授予了所申请的所有权限，<br>所以如果你以前的APP设置的targetSdkVersion低于23，在运行时也不会崩溃，<br>但这也只是一个临时的救急策略，用户还是可以在设置中取消授予的权限。</p><ul><li>声明目标SDK版本<br>我们需要在build.gradle中声明targetSdkVersion为23<figure class="highlight nginx"><table><tr><td class=code><pre><span class=line><span class=title>android</span> &#123;</span><br><span class=line>    <span class=title>compileSdkVersion</span> <span class=number>23</span></span><br><span class=line>    buildToolsVersion <span class=string>"23.0.1"</span></span><br><span class=line></span><br><span class=line>    defaultConfig &#123;</span><br><span class=line>        <span class=title>applicationId</span> <span class=string>"com.yourcomany.app</span><br><span class=line>        minSdkVersion 18</span><br><span class=line>        targetSdkVersion 23</span><br><span class=line>        versionCode 1</span><br><span class=line>        versionName "</span><span class=number>1</span>.<span class=number>0</span><span class=string>"</span><br><span class=line>    &#125;</span><br><span class=line>    buildTypes &#123;</span><br><span class=line>        release &#123;</span><br><span class=line>            minifyEnabled false</span><br><span class=line>            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'</span><br><span class=line>        &#125;</span><br><span class=line>    &#125;</span><br><span class=line>&#125;</span></span><br></pre></td></tr></table></figure></li></ul>]]>
    
    </summary>
    
      <category term="Android" scheme="https://aswifter.com/tags/Android/"/>
    
      <category term="Android" scheme="https://aswifter.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开始学习ECMAScript 6]]></title>
    <link href="https://aswifter.com/2015/11/01/start-learn-ECMAScript6/"/>
    <id>https://aswifter.com/2015/11/01/start-learn-ECMAScript6/</id>
    <published>2015-11-01T14:06:16.000Z</published>
    <updated>2015-11-01T14:39:35.000Z</updated>
    <content type="html"><![CDATA[<h2 id="ECMAScript_6介绍">ECMAScript 6介绍</h2><p>ECMAScript 6是JavaScript的最新标准，目前在<a href="https://facebook.github.io/react-native/" target="_blank" rel="external">React Native</a>中都可以使用ECMAScript 6语法，作为APP开发者还是很有必要学习一下ECMAScript 6的，或许哪天就是JavaScript的天下了。</p><h2 id="环境准备">环境准备</h2><p>学习语言新特性，有个REPL环境来练习还是很方便的，我们可以使用nodejs。</p><ol><li><p>安装Node环境<br>使用nvm安装node，以下脚本适合Mac OS安装</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="blockquote">&gt; brew install nvm</span></span><br><span class="line"><span class="blockquote">&gt; nvm install node</span></span><br><span class="line"><span class="blockquote">&gt; nvm use node</span></span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line">&gt; <span class="comment">node</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">harmony</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">use</span><span class="literal">-</span><span class="comment">strict</span></span><br></pre></td></tr></table></figure></li><li><p>Node支持哪些ECMAScript 6特性，<br>可以参考<a href="https://nodejs.org/en/docs/es6/" target="_blank" rel="external">ECMAScript 2015 (ES6) in Node.js</a></p></li></ol><h2 id="参考资料">参考资料</h2><ol><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6入门</a></li><li><a href="http://imweb.io/topic/56168ec45d6f37745e8f4975" target="_blank" rel="external">ECMAScript 6 学习笔记</a></li><li><a href="https://github.com/lukehoban/es6features" target="_blank" rel="external">Overview of ECMAScript 6 features</a></li><li><a href="http://www.cnblogs.com/Wayou/p/es6_new_features.html" target="_blank" rel="external">ES6新特性概览</a></li><li><a href="https://hacks.mozilla.org/category/es6-in-depth/" target="_blank" rel="external">ES6 In Depth</a></li></ol>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="ECMAScript_6介绍">ECMAScript 6介绍</h2><p>ECMAScript 6是JavaScript的最新标准，目前在<a href="https://facebook.github.io/react-native/" target="_bl]]>
    </summary>
    
      <category term="ec6" scheme="https://aswifter.com/tags/ec6/"/>
    
      <category term="JavaScript" scheme="https://aswifter.com/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Material Design控件汇总]]></title>
    <link href="https://aswifter.com/2015/10/24/Material-Design-Library/"/>
    <id>https://aswifter.com/2015/10/24/Material-Design-Library/</id>
    <published>2015-10-24T15:27:49.000Z</published>
    <updated>2015-10-24T15:36:38.000Z</updated>
    <content type="html"><![CDATA[<ul><li><p><a href="#">Material Design 支持库</a><br>谷歌提供的支持库，我们在Material Design设计中使用的首选控件，<br>具体使用可参考：<a href="http://www.aswifter.com/2015/07/02/Material-Design-Example-5/" target="_blank" rel="external">Material Design控件使用</a><br><img src="http://7xjq5l.com1.z0.glb.clouddn.com/android_transition.gif" alt=""></p></li><li><p><a href="https://github.com/afollestad/material-dialogs" target="_blank" rel="external">material-dialogs</a><br>Material Design样式弹出对话框<br><img src="https://raw.githubusercontent.com/afollestad/material-dialogs/master/art/mdart.jpg" alt=""></p></li><li><p><a href="https://github.com/mikepenz/MaterialDrawer" target="_blank" rel="external">MaterialDrawer</a><br>左侧Drawer的实现，比Android自带的更强大<br><img src="https://raw.githubusercontent.com/mikepenz/MaterialDrawer/develop/DEV/github/screenshots1.jpg" alt=""></p></li><li><p><a href="https://github.com/toddway/MaterialTransitions" target="_blank" rel="external">Android Material Transitions</a><br>Material Design转场动画的实现例子</p></li></ul><p><img src="https://raw.githubusercontent.com/toddway/MaterialTransitions/master/img/activity-transitions.gif" alt=""></p><ul><li><p><a href="https://github.com/prolificinteractive/material-calendarview" target="_blank" rel="external">Material Calendar View</a><br>日期控件<br><img src="https://github.com/prolificinteractive/material-calendarview/raw/master/images/screencast.gif" alt=""></p></li><li><p><a href="https://github.com/rengwuxian/MaterialEditText" target="_blank" rel="external">MaterialEditText</a><br>输入框<br><img src="https://github.com/rengwuxian/MaterialEditText/raw/master/images/material_edittext.png" alt=""></p></li><li><p><a href="https://github.com/florent37/MaterialViewPager" target="_blank" rel="external">MaterialViewPager</a><br>Material风格的ViewPager<br><img src="https://raw.githubusercontent.com/florent37/MaterialViewPager/master/screenshots/screenshot_2_small.png" alt=""></p></li><li><p><a href="https://github.com/frogermcs/InstaMaterial" target="_blank" rel="external">InstaMaterial</a><br>Material Design风格的Instagram Demo<br><img src="https://camo.githubusercontent.com/9e05eda3332e7d259fd2d8193db978cdbcf0ea4a/687474703a2f2f696d672e796f75747562652e636f6d2f76692f56704c505f5f56757078772f302e6a7067" alt=""></p></li></ul><ul><li><a href="https://github.com/google/material-design-icons" target="_blank" rel="external">material-design-icons</a><br>Material Design 图标汇总<br><img src="http://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0Bx4BSt6jniD7OFZFR1ZOUmFWTEE/style_icons_system_intro.png" alt=""></li></ul>]]></content>
    <summary type="html">
    <![CDATA[<ul><li><p><a href="#">Material Design 支持库</a><br>谷歌提供的支持库，我们在Material Design设计中使用的首选控件，<br>具体使用可参考：<a href="http://www.aswifter.com/2015/07]]>
    </summary>
    
      <category term="Material Design" scheme="https://aswifter.com/tags/Material-Design/"/>
    
      <category term="android" scheme="https://aswifter.com/categories/android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决adb启动失败问题]]></title>
    <link href="https://aswifter.com/2015/10/24/adb-failed-to-start-daemon/"/>
    <id>https://aswifter.com/2015/10/24/adb-failed-to-start-daemon/</id>
    <published>2015-10-24T14:36:21.000Z</published>
    <updated>2015-10-24T14:44:02.000Z</updated>
    <content type="html"><![CDATA[<p>我们在平时开发中，有时候会碰到adb启动失败：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"* daemon not running. starting it now on port 5037 *</span><br><span class="line">ADB server didn't ACK</span><br><span class="line">* failed to <span class="operator"><span class="keyword">start</span> daemon *</span><br><span class="line">error: cannot <span class="keyword">connect</span> <span class="keyword">to</span> daemon<span class="string">"</span></span></span><br></pre></td></tr></table></figure><p>一般出现这种情况都是因为其他其他程序占用了5037端口（比如豌豆荚，刷机精灵等），<br>通过以下命令可以找出哪个进程占用了5037端口<br><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">netstat -ano <span class="string">| findstr "</span><span class="number">5037</span><span class="string">"</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="tag">TCP</span>    127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:5037</span>         127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:60478</span>        <span class="tag">ESTABLISHED</span>     6312</span><br><span class="line"><span class="tag">TCP</span>    127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:5037</span>         127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:60479</span>        <span class="tag">ESTABLISHED</span>     6312</span><br><span class="line"><span class="tag">TCP</span>    127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:5037</span>         127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:60480</span>        <span class="tag">ESTABLISHED</span>     6312</span><br><span class="line"><span class="tag">TCP</span>    127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:5037</span>         127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:60481</span>        <span class="tag">ESTABLISHED</span>     6312</span><br><span class="line"><span class="tag">TCP</span>    127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:5037</span>         127<span class="class">.0</span><span class="class">.0</span><span class="class">.1</span><span class="pseudo">:60482</span>        <span class="tag">ESTABLISHED</span>     6312</span><br></pre></td></tr></table></figure><p>我这边找到的进程号是6312, 然后我们在任务管理器里找到这个进程<br><img src="http://7xjq5l.com1.z0.glb.clouddn.com/adb_task.png" alt=""></p><p>如果这个进程不是adb, 结束它，再重启adb就会成功了。</p>]]></content>
    <summary type="html">
    <![CDATA[<p>我们在平时开发中，有时候会碰到adb启动失败：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">"* daemon not running. start]]>
    </summary>
    
      <category term="Android" scheme="https://aswifter.com/tags/Android/"/>
    
      <category term="Android" scheme="https://aswifter.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用TabLayout实现底部Tab布局]]></title>
    <link href="https://aswifter.com/2015/08/09/implements-bottom-tab-with-tablayout/"/>
    <id>https://aswifter.com/2015/08/09/implements-bottom-tab-with-tablayout/</id>
    <published>2015-08-09T12:03:47.000Z</published>
    <updated>2015-08-09T15:07:44.000Z</updated>
    <content type="html"><![CDATA[<p>Android design支持库中的TabLayout一般都用来实现头部Tab的效果，<br>比如：<br><img src="http://7xjq5l.com1.z0.glb.clouddn.com/m3.png" alt="TabLayout"></p><p>但是像微信这种底部Tab布局在我们实际项目中还是非常常见的设计，<br>现在我们也可以用TabLayout非常方便的实现。<br><img src="http://7xjq5l.com1.z0.glb.clouddn.com/bottom_tab.png" alt="底部Tab"></p><a id="more"></a><p><br></p><h2 id="布局">布局</h2><p>下面我们开始实现底部Tab，layout布局比较简单，我们只用把TabLayout放置在底部即可<br><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">&lt;LinearLayout</span><br><span class="line">        android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">        android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span></span><br><span class="line">        android:<span class="variable">layout_below=</span><span class="string">"@+id/appbar"</span></span><br><span class="line">        android:<span class="variable">orientation=</span><span class="string">"vertical"</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;android.support.v4.view.ViewPager</span><br><span class="line">            android:<span class="variable">id=</span><span class="string">"@+id/viewPager"</span></span><br><span class="line">            android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">            android:<span class="variable">layout_height=</span><span class="string">"0dp"</span></span><br><span class="line">            android:<span class="variable">layout_weight=</span><span class="string">"1.0"</span></span><br><span class="line">            android:<span class="variable">scrollbars=</span><span class="string">"none"</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;android.support.design.widget.TabLayout</span><br><span class="line">            android:<span class="variable">id=</span><span class="string">"@+id/tabLayout"</span></span><br><span class="line">            <span class="variable">style=</span><span class="string">"@style/MyCustomTabLayout"</span></span><br><span class="line">            android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">            android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure></p><p>我定义了一个自定义的style,把tabIndicatorHeight设为0dp</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;style <span class="property">name</span>=<span class="string">"MyCustomTabLayout"</span> parent=<span class="string">"Widget.Design.TabLayout"</span>&gt;</span><br><span class="line">        &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"tabMaxWidth"</span>&gt;@dimen/tab_max_width&lt;/<span class="property">item</span>&gt;</span><br><span class="line">        &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"tabIndicatorColor"</span>&gt;?attr/colorAccent&lt;/<span class="property">item</span>&gt;</span><br><span class="line">        &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"tabIndicatorHeight"</span>&gt;<span class="number">0</span>dp&lt;/<span class="property">item</span>&gt;</span><br><span class="line">        &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"tabPaddingStart"</span>&gt;<span class="number">12</span>dp&lt;/<span class="property">item</span>&gt;</span><br><span class="line">        &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"tabPaddingEnd"</span>&gt;<span class="number">12</span>dp&lt;/<span class="property">item</span>&gt;</span><br><span class="line">        &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"tabBackground"</span>&gt;@color/tab_bgcolor&lt;/<span class="property">item</span>&gt;</span><br><span class="line">        &lt;<span class="property">item</span> <span class="property">name</span>=<span class="string">"tabSelectedTextColor"</span>&gt;?android:textColorPrimary&lt;/<span class="property">item</span>&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="代码实现">代码实现</h2><p>我们首先设置好ViewPager，然后设置TabLayout与ViewPager的对应关系，<br>最后最关键的是使用TabLayout的setCustomView设置自定义的TAB View。</p><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">viewPager = <span class="params">(ViewPager)</span>findViewById<span class="params">(R.id.viewPager)</span>;</span><br><span class="line">tabLayout = <span class="params">(TabLayout)</span> findViewById<span class="params">(R.id.tabLayout)</span>;</span><br><span class="line"></span><br><span class="line">SampleFragmentPagerAdapter pagerAdapter =</span><br><span class="line">        new SampleFragmentPagerAdapter<span class="params">(getSupportFragmentManager<span class="params">()</span>, this)</span>;</span><br><span class="line">viewPager.setAdapter<span class="params">(pagerAdapter)</span>;</span><br><span class="line"></span><br><span class="line">tabLayout.setupWithViewPager<span class="params">(viewPager)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="params">(int i = <span class="number">0</span>; i &lt; tabLayout.getTabCount<span class="params">()</span>; i++)</span> &#123;</span><br><span class="line">    TabLayout.Tab tab = tabLayout.getTabAt<span class="params">(i)</span>;</span><br><span class="line">    <span class="keyword">if</span> <span class="params">(tab != null)</span> &#123;</span><br><span class="line">        tab.setCustomView<span class="params">(pagerAdapter.getTabView<span class="params">(i)</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">viewPager.setCurrentItem<span class="params">(<span class="number">1</span>)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">public View getTabView<span class="params">(int position)</span> &#123;</span><br><span class="line">            View v = LayoutInflater.from<span class="params">(context)</span>.inflate<span class="params">(R.layout.custom_tab, null)</span>;</span><br><span class="line">            TextView tv = <span class="params">(TextView)</span> v.findViewById<span class="params">(R.id.textView)</span>;</span><br><span class="line">            tv.setText<span class="params">(tabTitles[position])</span>;</span><br><span class="line">            ImageView img = <span class="params">(ImageView)</span> v.findViewById<span class="params">(R.id.imageView)</span>;</span><br><span class="line">            <span class="comment">//img.setImageResource(imageResId[position]);</span></span><br><span class="line">            return v;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>代码例子：<a href="https://github.com/chenyangcun/MaterialDesignExample/blob/master/app/src/main/java/com/aswifter/material/example/BottomTabActivity.java" target="_blank" rel="external">BottomTabActivity.java</a></p>]]></content>
    <summary type="html">
    <![CDATA[<p>Android design支持库中的TabLayout一般都用来实现头部Tab的效果，<br>比如：<br><img src=http://7xjq5l.com1.z0.glb.clouddn.com/m3.png alt=TabLayout></p><p>但是像微信这种底部Tab布局在我们实际项目中还是非常常见的设计，<br>现在我们也可以用TabLayout非常方便的实现。<br><img src=http://7xjq5l.com1.z0.glb.clouddn.com/bottom_tab.png alt=底部Tab></p>]]>
    
    </summary>
    
      <category term="TabLayout" scheme="https://aswifter.com/tags/TabLayout/"/>
    
      <category term="Android" scheme="https://aswifter.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio网盘下载]]></title>
    <link href="https://aswifter.com/2015/08/02/android-resource-suggest/"/>
    <id>https://aswifter.com/2015/08/02/android-resource-suggest/</id>
    <published>2015-08-02T02:43:21.000Z</published>
    <updated>2015-08-02T03:09:17.000Z</updated>
    <content type="html"><![CDATA[<h2 id="开发工具">开发工具</h2><p><img src="http://image.aswifter.com/android-studio.jpg" alt=""></p><p>Android Studio 1.3 网盘下载<br><a href="http://pan.baidu.com/s/1eQm5zto" target="_blank" rel="external">Windows</a><br><a href="http://pan.baidu.com/s/1mg3Uie8" target="_blank" rel="external">Mac OSX</a><br><a href="http://pan.baidu.com/s/1qWl5eRa" target="_blank" rel="external">Linux</a></p><a id="more"></a><h2 id="Android_SDK镜像服务器">Android SDK镜像服务器</h2><p>中国科学院开源协会镜像站地址:</p><ul><li><p>IPV4/IPV6: <a href="http://mirrors.opencas.cn" target="_blank" rel="external">http://mirrors.opencas.cn</a> 端口：80</p></li><li><p>IPV4/IPV6: <a href="http://mirrors.opencas.org" target="_blank" rel="external">http://mirrors.opencas.org</a> 端口：80</p></li><li><p>IPV4/IPV6: <a href="http://mirrors.opencas.ac.cn" target="_blank" rel="external">http://mirrors.opencas.ac.cn</a> 端口：80</p></li></ul><p>上海GDG镜像服务器地址:</p><ul><li><a href="http://sdk.gdgshanghai.com" target="_blank" rel="external">http://sdk.gdgshanghai.com</a> 端口：8000</li></ul><p>北京化工大学镜像服务器地址:</p><ul><li><p>IPv4: <a href="http://ubuntu.buct.edu.cn/" target="_blank" rel="external">http://ubuntu.buct.edu.cn/</a> 端口：80</p></li><li><p>IPv4: <a href="http://ubuntu.buct.cn/" target="_blank" rel="external">http://ubuntu.buct.cn/</a> 端口：80</p></li><li><p>IPv6: <a href="http://ubuntu.buct6.edu.cn/" target="_blank" rel="external">http://ubuntu.buct6.edu.cn/</a> 端口：80</p></li></ul><p>大连东软信息学院镜像服务器地址:</p><ul><li><a href="http://mirrors.neusoft.edu.cn" target="_blank" rel="external">http://mirrors.neusoft.edu.cn</a> 端口：80</li></ul><p>使用方法：</p><p>启动 Android SDK Manager ，打开主界面，依次选择『Tools』、『Options…』，弹出『Android SDK Manager - Settings』窗口；</p><p>在『Android SDK Manager - Settings』窗口中，在『HTTP Proxy Server」和「HTTP Proxy Port』输入框内填入上面镜像服务器地址(不包含<a href="http://，如下图)和端口，并且选中『Force" target="_blank" rel="external">http://，如下图)和端口，并且选中『Force</a> https://… sources to be fetched using <a href="http://...』复选框。设置完成后单击『Close』按钮关闭『Android" target="_blank" rel="external">http://...』复选框。设置完成后单击『Close』按钮关闭『Android</a> SDK Manager - Settings』窗口返回到主界面；</p><p>依次选择『Packages』、『Reload』。</p><p><img src="http://www.androiddevtools.cn/static/image/sdk-manager-proxy-settings.png" alt=""></p><h2 id="Android开发教程">Android开发教程</h2><p>Google Android官方培训课程中文版<br>地址：<a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">http://hukai.me/android-training-course-in-chinese/index.html</a></p><p>Android API Guides中文版<br>地址：<a href="http://wiki.eoeandroid.com/Android_API_Guides" target="_blank" rel="external">http://wiki.eoeandroid.com/Android_API_Guides</a></p><blockquote><p>本文内容整理自：<a href="http://www.androiddevtools.cn/" target="_blank" rel="external">AndroidDevTools</a> 这里还有很多好东西，推荐大家收藏。</p></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h2 id=开发工具>开发工具</h2><p><img src=http://image.aswifter.com/android-studio.jpg alt=""></p><p>Android Studio 1.3 网盘下载<br><a href=http://pan.baidu.com/s/1eQm5zto>Windows</a><br><a href=http://pan.baidu.com/s/1mg3Uie8>Mac OSX</a><br><a href=http://pan.baidu.com/s/1qWl5eRa>Linux</a></p>]]>
    
    </summary>
    
      <category term="Android" scheme="https://aswifter.com/tags/Android/"/>
    
      <category term="Android Studio" scheme="https://aswifter.com/tags/Android-Studio/"/>
    
      <category term="Android" scheme="https://aswifter.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Material Design 动画实现]]></title>
    <link href="https://aswifter.com/2015/08/01/android-material-design-animation/"/>
    <id>https://aswifter.com/2015/08/01/android-material-design-animation/</id>
    <published>2015-08-01T15:03:37.000Z</published>
    <updated>2015-08-01T15:18:01.000Z</updated>
    <content type="html"><![CDATA[<p>前段时间，利用<a href="http://www.aswifter.com/2015/07/02/Material-Design-Example-5/" target="_blank" rel="external">Material Design控件</a>编写了一个Example，今天我在这个项目的基础上，加入一些动画。</p><p>先上效果图：</p><p><img src="http://7xjq5l.com1.z0.glb.clouddn.com/android_transition.gif" alt=""></p><p>主要加了3个动画：FAB动画，列表加载动画，Shared Element Transition</p><a id="more"></a><h2 id="FAB动画">FAB动画</h2><p>首先，我们需要把FAB按钮移到屏幕下边去，我在Fragment的<code>onActivityCreated</code>方法中加入</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="tag">mFabButton</span><span class="class">.setTranslationY</span>(2 * <span class="tag">getResources</span>()<span class="class">.getDimensionPixelOffset</span>(<span class="tag">R</span><span class="class">.dimen</span><span class="class">.btn_fab_size</span>));</span><br></pre></td></tr></table></figure><p>然后我在从网络获取到数据后，开始FAB显示动画</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="tag">mFabButton</span><span class="class">.animate</span>()</span><br><span class="line">        <span class="class">.translationY</span>(0)</span><br><span class="line">        <span class="class">.setInterpolator</span>(<span class="tag">new</span> <span class="tag">OvershootInterpolator</span>(1<span class="class">.f</span>))</span><br><span class="line">        <span class="class">.setStartDelay</span>(500)</span><br><span class="line">        <span class="class">.setDuration</span>(<span class="tag">ANIM_DURATION_FAB</span>)</span><br><span class="line">        <span class="class">.start</span>();</span><br></pre></td></tr></table></figure><p>在delay 500秒后开始动画，主要是因为要与列表项的加载动画同步。<br>使用OvershootInterpolator修饰动画，可以实现在向上移动超出原来位置一定值后，再返回到原位置的效果。</p><h2 id="列表加载动画">列表加载动画</h2><p>列表我是用RecycleView实现，我们需要在Adapter里加入动画处理</p><p>在<code>onBindViewHolder</code>方法中加入<br><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">runEnterAnimation<span class="list">(<span class="keyword">holder</span>.itemView, position)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>然后我们实现runEnterAnimation方法</p><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">private void runEnterAnimation<span class="params">(View view, int position)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="params">(!animateItems || position &gt;= <span class="number">3</span>)</span> &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="params">(position &gt; lastAnimatedPosition)</span> &#123;</span><br><span class="line">        lastAnimatedPosition = position;</span><br><span class="line">        view.setTranslationY<span class="params">(Utils.getScreenHeight<span class="params">(getActivity<span class="params">()</span>)</span>)</span>;</span><br><span class="line">        view.animate<span class="params">()</span></span><br><span class="line">                .translationY<span class="params">(<span class="number">0</span>)</span></span><br><span class="line">                .setStartDelay<span class="params">(<span class="number">100</span> * position)</span></span><br><span class="line">                .setInterpolator<span class="params">(new DecelerateInterpolator<span class="params">(<span class="number">3</span>.f)</span>)</span></span><br><span class="line">                .setDuration<span class="params">(<span class="number">700</span>)</span></span><br><span class="line">                .start<span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列表加载动画，不是所有项都需要的，比如我这个例子中，屏幕上只能显示3个Item，<br>所以<code>position &gt;= 3</code>就不用加入动画了。</p><p>先将Item向下移出屏幕<br><code>view.setTranslationY(Utils.getScreenHeight(getActivity()));</code></p><p>接着根据Item的position设定delay时间，这样可以实现Item一个一个出现,<br>加入<code>DecelerateInterpolator</code> 可以实现动画先快后慢的效果。</p><h2 id="Shared_Element_Transition">Shared Element Transition</h2><p>Shared Element Transition是Android 5.0引入的动画效果，可以在两个Activity中实现共享元素变换动画，<br>在我的这个例子中，就是实现点击Item后，图片可以慢慢放大和移位的效果。</p><h3 id="设置transitionName">设置transitionName</h3><p>首先，我们需要选定变换开始和结束的元素，给它们设置一个相同的<code>transitionName</code>，<br>我这个例子中，开始变换的元素是列表中的图片</p><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">&lt;ImageView</span><br><span class="line">        android:<span class="variable">id=</span><span class="string">"@+id/ivBook"</span></span><br><span class="line">        android:<span class="variable">transitionName=</span><span class="string">"@string/transition_book_img"</span></span><br><span class="line">        android:<span class="variable">layout_width=</span><span class="string">"109dp"</span></span><br><span class="line">        android:<span class="variable">layout_height=</span><span class="string">"135dp"</span></span><br><span class="line">        android:<span class="variable">src=</span><span class="string">"@drawable/book1"</span> /&gt;</span><br></pre></td></tr></table></figure><p>开始变换的元素是图书明细界面中的图片</p><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">&lt;ImageView</span><br><span class="line">          android:<span class="variable">id=</span><span class="string">"@+id/ivImage"</span></span><br><span class="line">          android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">          android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span></span><br><span class="line">          android:<span class="variable">fitsSystemWindows=</span><span class="string">"true"</span></span><br><span class="line">          android:<span class="variable">transitionName=</span><span class="string">"@string/transition_book_img"</span></span><br><span class="line">          android:<span class="variable">scaleType=</span><span class="string">"centerCrop"</span></span><br><span class="line">          app:<span class="variable">layout_collapseMode=</span><span class="string">"parallax"</span></span><br><span class="line">          app:<span class="variable">layout_collapseParallaxMultiplier=</span><span class="string">"0.7"</span> /&gt;</span><br></pre></td></tr></table></figure><p><code>transition_book_img</code>就是一个普通的string，只要值是唯一的就可以了。</p><h3 id="使用Shared_Element_Transition">使用Shared Element Transition</h3><p>在Activity切换的时候，使用Shared Element Transition</p><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">Book book = mAdapter.getBook<span class="params">(position)</span>;</span><br><span class="line">Intent intent = new Intent<span class="params">(getActivity<span class="params">()</span>, BookDetailActivity.class)</span>;</span><br><span class="line">intent.putExtra<span class="params">(<span class="string">"book"</span>, book)</span>;</span><br><span class="line">ActivityOptionsCompat options =</span><br><span class="line">        ActivityOptionsCompat.makeSceneTransitionAnimation<span class="params">(getActivity<span class="params">()</span>,</span><br><span class="line">                view.findViewById<span class="params">(R.id.ivBook)</span>, getString<span class="params">(R.string.transition_book_img)</span>)</span>;</span><br><span class="line"></span><br><span class="line">ActivityCompat.startActivity<span class="params">(getActivity<span class="params">()</span>, intent, options.toBundle<span class="params">()</span>)</span>;</span><br></pre></td></tr></table></figure><p>使用<code>ActivityOptionsCompat</code>的<code>makeSceneTransitionAnimation</code>方法创建动画，<br>需要指定一个View作为起始变换的View，以及变换的transitionName，<br>我这里使用的是<code>ivBook</code>作为起始View，<code>transition_book_img</code>作为变换的transitionName，与XML中的设定一致。</p><p>这样就OK了，ImageView的位移和大小变化，Android会自动帮你搞定。<br>当然我们也可以自定义变换动画，后续再研究~~~</p><blockquote><p>这个效果只支持Android 5.0以上</p></blockquote><h2 id="Github">Github</h2><p>最新项目的代码，已经上传到Github<br>源码地址：<a href="https://github.com/chenyangcun/MaterialDesignExample" target="_blank" rel="external">MaterialDesignExample</a></p><p><strong>抛砖引玉，期待你的加入，一起来完善这个Demo</strong></p>]]></content>
    <summary type="html">
    <![CDATA[<p>前段时间，利用<a href="http://www.aswifter.com/2015/07/02/Material-Design-Example-5/">Material Design控件</a>编写了一个Example，今天我在这个项目的基础上，加入一些动画。</p><p>先上效果图：</p><p><img src=http://7xjq5l.com1.z0.glb.clouddn.com/android_transition.gif alt=""></p><p>主要加了3个动画：FAB动画，列表加载动画，Shared Element Transition</p>]]>
    
    </summary>
    
      <category term="Android" scheme="https://aswifter.com/tags/Android/"/>
    
      <category term="Animation" scheme="https://aswifter.com/tags/Animation/"/>
    
      <category term="Material Design" scheme="https://aswifter.com/tags/Material-Design/"/>
    
      <category term="Android" scheme="https://aswifter.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android输入框中加入清除按钮]]></title>
    <link href="https://aswifter.com/2015/07/31/android-edittext-add-clear-button/"/>
    <id>https://aswifter.com/2015/07/31/android-edittext-add-clear-button/</id>
    <published>2015-07-31T14:03:25.000Z</published>
    <updated>2015-07-31T15:24:49.000Z</updated>
    <content type="html"><![CDATA[<p>在Android的输入框中加入清除按钮，是很常见的设计，本文介绍如何创建一个控件，在输入框中加入清除按钮。</p><p><img src="https://cdn-images-2.medium.com/max/1778/1*i-x7oRR40tHIzCJwoDOanw.png" alt=""></p><p>我们来看看实现这个控件都需要做什么：</p><ol><li>清除按钮在输入框中有内容时出现</li><li>清除按钮必须出现在输入框内</li><li>点击清除按钮，清除输入框中的所有内容</li><li>清除按钮的颜色必须与主题一致</li></ol><p>实现第一点，我们可以通过加入TextWatcher来监听EditText的变化，在onFocusChangeListener方法中处理清除按钮是否可见。<br>实现第二点，我们需要使用compound drawable作为清除按钮，然后在 OnTouch listener中处理点击事件。</p><a id="more"></a><h3 id="开始实现我们的EditText">开始实现我们的EditText</h3><p>我们使用AppCompatEditText作为基类</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ClearableEditText</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AppCompatEditText</span></span><br><span class="line"></span>implements <span class="type">View</span>.<span class="type">OnTouchListener</span>, <span class="type">View</span>.<span class="type">OnFocusChangeListener</span>, <span class="type">TextWatcher</span> &#123;</span><br></pre></td></tr></table></figure><p>接着加入构造函数</p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClearableEditText</span><span class="params">(<span class="keyword">final</span> Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context);</span><br><span class="line">    init(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClearableEditText</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    init(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClearableEditText</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> AttributeSet attrs, <span class="keyword">final</span> <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    init(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现init方法</p><ul><li>创建drawable，并为其加入Touch、Focus事件处理</li><li>加入TextChangedListener，监听EditText内容变化</li></ul><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">private void init<span class="params">(final Context context)</span> &#123;</span><br><span class="line">    final Drawable drawable = ContextCompat.getDrawable<span class="params">(context, R.drawable.abc_ic_clear_mtrl_alpha)</span>;</span><br><span class="line">    final Drawable wrappedDrawable = DrawableCompat.wrap<span class="params">(drawable)</span>; <span class="comment">//Wrap the drawable so that it can be tinted pre Lollipop</span></span><br><span class="line">    DrawableCompat.setTint<span class="params">(wrappedDrawable, getCurrentHintTextColor<span class="params">()</span>)</span>;</span><br><span class="line">    mClearTextIcon = wrappedDrawable;</span><br><span class="line">    mClearTextIcon.setBounds<span class="params">(<span class="number">0</span>, <span class="number">0</span>, mClearTextIcon.getIntrinsicHeight<span class="params">()</span>, mClearTextIcon.getIntrinsicHeight<span class="params">()</span>)</span>;</span><br><span class="line">    setClearIconVisible<span class="params">(<span class="literal">false</span>)</span>;</span><br><span class="line">    super.setOnTouchListener<span class="params">(this)</span>;</span><br><span class="line">    super.setOnFocusChangeListener<span class="params">(this)</span>;</span><br><span class="line">    addTextChangedListener<span class="params">(this)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们默认使用<code>setClearIconVisible(false)</code>隐藏了清除按钮，在输入文本时才会显示</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="typename">void</span> setClearIconVisible(<span class="keyword">final</span> <span class="typename">boolean</span> visible) &#123;</span><br><span class="line">    mClearTextIcon.setVisible(visible, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">final</span> Drawable[] compoundDrawables = getCompoundDrawables();</span><br><span class="line">    setCompoundDrawables(</span><br><span class="line">            compoundDrawables[<span class="number">0</span>],</span><br><span class="line">            compoundDrawables[<span class="number">1</span>],</span><br><span class="line">            visible ? mClearTextIcon : <span class="literal">null</span>,</span><br><span class="line">            compoundDrawables[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加入Listener">加入Listener</h3><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Drawable mClearTextIcon;</span><br><span class="line"><span class="keyword">private</span> OnFocusChangeListener mOnFocusChangeListener;</span><br><span class="line"><span class="keyword">private</span> OnTouchListener mOnTouchListener;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setOnFocusChangeListener</span><span class="params">(<span class="keyword">final</span> OnFocusChangeListener onFocusChangeListener)</span> </span>&#123;</span><br><span class="line">    mOnFocusChangeListener = onFocusChangeListener;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setOnTouchListener</span><span class="params">(<span class="keyword">final</span> OnTouchListener onTouchListener)</span> </span>&#123;</span><br><span class="line">    mOnTouchListener = onTouchListener;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现Listener">实现Listener</h3><p>最后我们来实现3个Listener，先来看focus Listener</p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onFocusChange</span><span class="params">(<span class="keyword">final</span> View view, <span class="keyword">final</span> <span class="keyword">boolean</span> hasFocus)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hasFocus) &#123;</span><br><span class="line">        setClearIconVisible(getText().length() &gt; <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setClearIconVisible(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mOnFocusChangeListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mOnFocusChangeListener.onFocusChange(view, hasFocus);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在获取焦点时，判断输入框中内容是否大于0，有内容则显示清除按钮。</p><p>接着我们来看onTouch方法：</p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(<span class="keyword">final</span> View view, <span class="keyword">final</span> MotionEvent motionEvent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> x = (<span class="keyword">int</span>) motionEvent.getX();</span><br><span class="line">    <span class="keyword">if</span> (mClearTextIcon.isVisible() &amp;&amp; x &gt; getWidth() - getPaddingRight() - mClearTextIcon.getIntrinsicWidth()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (motionEvent.getAction() == MotionEvent.ACTION_UP) &#123;</span><br><span class="line">            setText(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mOnTouchListener != <span class="keyword">null</span> &amp;&amp; mOnTouchListener.onTouch(view, motionEvent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们首先检查了清除按钮是否为显示状态，然后判断点击的范围是否在清除按钮内，<br>如果在范围内的话，在ACTION_UP时清空输入框内容，否则执行mOnTouchListener的<br>onTouch方法。</p><p>最后，我们实现TextWatcher：</p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(<span class="keyword">final</span> CharSequence s, <span class="keyword">final</span> <span class="keyword">int</span> start, <span class="keyword">final</span> <span class="keyword">int</span> before, <span class="keyword">final</span> <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isFocused()) &#123;</span><br><span class="line">        setClearIconVisible(s.length() &gt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断输入框中的字数，大于0则显示清除按钮，否则隐藏。</p><p>如果你使用的是AutoCompleteTextView，我们也可以使用同样的方法添加清除按钮：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ClearableAutoCompleteTextView</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AppCompatAutoCompleteTextView</span></span><br><span class="line"></span>implements <span class="type">View</span>.<span class="type">OnTouchListener</span>, <span class="type">View</span>.<span class="type">OnFocusChangeListener</span>, <span class="type">TextWatcher</span> &#123;</span><br></pre></td></tr></table></figure><p>该控件的源码已上传到Github: <a href="https://github.com/depop/ClearableEditText/" target="_blank" rel="external">ClearableEditText</a></p><p>本文译自：<a href="https://medium.com/engineering-at-depop/giving-your-edit-texts-the-all-clear-8ad2579a11ff" target="_blank" rel="external">Giving your Edit Texts the All Clear</a></p>]]></content>
    <summary type="html">
    <![CDATA[<p>在Android的输入框中加入清除按钮，是很常见的设计，本文介绍如何创建一个控件，在输入框中加入清除按钮。</p><p><img src=https://cdn-images-2.medium.com/max/1778/1*i-x7oRR40tHIzCJwoDOanw.png alt=""></p><p>我们来看看实现这个控件都需要做什么：</p><ol><li>清除按钮在输入框中有内容时出现</li><li>清除按钮必须出现在输入框内</li><li>点击清除按钮，清除输入框中的所有内容</li><li>清除按钮的颜色必须与主题一致</li></ol><p>实现第一点，我们可以通过加入TextWatcher来监听EditText的变化，在onFocusChangeListener方法中处理清除按钮是否可见。<br>实现第二点，我们需要使用compound drawable作为清除按钮，然后在 OnTouch listener中处理点击事件。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="https://aswifter.com/tags/Android/"/>
    
      <category term="ClearableEditText" scheme="https://aswifter.com/tags/ClearableEditText/"/>
    
      <category term="Android" scheme="https://aswifter.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SwiftDate：Swift中的日期处理库]]></title>
    <link href="https://aswifter.com/2015/07/26/use-swiftdate/"/>
    <id>https://aswifter.com/2015/07/26/use-swiftdate/</id>
    <published>2015-07-26T08:12:32.000Z</published>
    <updated>2015-07-27T16:55:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/malcommac/SwiftDate/master/assets/logo.png" alt=""></p><p><code>SwiftDate</code>是Github上开源的，使用Swift语言编写的NSDate封装库，可以很方便的在Swift中处理日期，比如日期创建，比较，输出等。</p><h2 id="特性">特性</h2><ul><li>支持数学运算符进行日期计算（比如myDate + 2.week + 1.hour)</li><li>支持比较运算符（比如&lt;,&gt;,==,&lt;=,&gt;=）</li><li>快速获取/修改日期各部分内容（比如获取或修改日期中的月份）</li><li>提供通用格式化输出或自定义的格式化输出</li><li>提供一系列.toString方法</li><li>提供简便的方法获取yesterday,tomorrow等</li></ul><h2 id="依赖">依赖</h2><ul><li>iOS 8.0+ / Mac OS X 10.10+</li><li>Xcode 6.4</li><li>Swift 1.2</li></ul><blockquote><p>支持Swift2.0版本，地址在文末的Github段落中</p></blockquote><a id="more"></a><h2 id="使用">使用</h2><h3 id="CocoaPods安装SwiftDate">CocoaPods安装SwiftDate</h3><p>我们需要通过CocoaPods安装SwitDate，如果你还没有安装cocoapods，可以通过如下命令安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gem install cocoapods</span><br></pre></td></tr></table></figure><p>然后在你的Xcode项目中的Podfile文件中，添加如下内容：</p><figure class="highlight puppet"><table><tr><td class="code"><pre><span class="line"><span class="literal">source</span> <span class="string">'https://github.com/CocoaPods/Specs.git'</span></span><br><span class="line"><span class="literal">platform</span> :ios, <span class="string">'8.0'</span></span><br><span class="line">use_frameworks!</span><br><span class="line"></span><br><span class="line">pod <span class="string">'SwiftDate'</span></span><br></pre></td></tr></table></figure><p>最后，执行如下命令安装</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ pod <span class="keyword">install</span></span><br></pre></td></tr></table></figure><h3 id="创建日期">创建日期</h3><ul><li>通过解析字符串创建</li></ul><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> date_custom = NSDate.date<span class="params">(fromString: <span class="string">"2015-07-26"</span>, format: DateFormat.Custom<span class="params">(<span class="string">"YYYY-MM-DD"</span>)</span>)</span></span><br></pre></td></tr></table></figure><ul><li>通过指定日期各部分创建</li></ul><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">let date_from_components = NSDate.date(<span class="string">refDate:</span> nil, <span class="string">year:</span> <span class="number">2014</span>, <span class="string">month:</span> <span class="number">01</span>, <span class="string">day:</span> nil, <span class="string">hour:</span> nil, <span class="string">minute:</span> nil, <span class="string">second:</span> nil, <span class="string">tz:</span> <span class="string">"UTC"</span>)</span><br></pre></td></tr></table></figure><ul><li>通过String类的toDate方法创建</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="string">"2015-07-26"</span>.toDate(formatString: <span class="string">"YYYY-MM-DD"</span>)</span><br></pre></td></tr></table></figure><ul><li>通过NSDate的静态方法创建</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> todayDate = <span class="type">NSDate</span>.today()</span><br><span class="line"><span class="keyword">let</span> yesterdayDate = <span class="type">NSDate</span>.yesterday()</span><br><span class="line"><span class="keyword">let</span> tomorrowDate = <span class="type">NSDate</span>.tomorrow()</span><br></pre></td></tr></table></figure><h3 id="获取日期中年月日等信息">获取日期中年月日等信息</h3><p>我们可以通过NSDate的以下属性获取</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.year</span><br><span class="line">.month</span><br><span class="line">.weekOfMonth</span><br><span class="line">.weekday</span><br><span class="line">.weekdayOrdinal</span><br><span class="line">.day</span><br><span class="line">.hour</span><br><span class="line">.minute</span><br><span class="line">.second</span><br><span class="line">.era</span><br><span class="line">.firstDayOfWeek <span class="comment">// (first day of the week of passed date)</span></span><br><span class="line">.lastDayOfWeek <span class="comment">// (last day of the week of passed date)</span></span><br><span class="line">.nearestHour <span class="comment">// (nearest hour of the passed date)</span></span><br><span class="line">.isLeapYear() <span class="comment">// true if date's represented year is leap</span></span><br><span class="line">.monthDays() <span class="comment">// return the number of days in date's represented month</span></span><br></pre></td></tr></table></figure><h3 id="修改日期">修改日期</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="type">NSDate</span>()</span><br><span class="line">date = date.<span class="keyword">set</span>(<span class="string">"hour"</span>,value: <span class="number">12</span>)!</span><br><span class="line">date = date.<span class="keyword">set</span>(<span class="string">"day"</span>,value: <span class="number">1</span>)!</span><br></pre></td></tr></table></figure><h3 id="日期运算">日期运算</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="type">NSDate</span>()</span><br><span class="line"><span class="keyword">let</span> tomorrow = date+<span class="number">1</span>.day</span><br><span class="line"><span class="keyword">let</span> two_months_ago = date-<span class="number">2</span>.months</span><br></pre></td></tr></table></figure><h3 id="时区转换">时区转换</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">let date = <span class="function"><span class="title">NSDate</span><span class="params">()</span></span> <span class="comment">//本地时区</span></span><br><span class="line">let date_as_utc = date.<span class="function"><span class="title">toUTC</span><span class="params">()</span></span> <span class="comment">//UTC 时间</span></span><br><span class="line">let date_as_beijing = date_as_utc.<span class="function"><span class="title">toTimezone</span><span class="params">(<span class="string">"UTC+8"</span>)</span></span> <span class="comment">//北京时间</span></span><br></pre></td></tr></table></figure><h3 id="日期比较">日期比较</h3><p>我们可以通过数学运算符比较</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> date1 = <span class="type">NSDate</span>.date(fromString: <span class="string">"2015-07-26"</span>, format: <span class="type">DateFormat</span>.<span class="type">Custom</span>(<span class="string">"YYYY-MM-DD"</span>))</span><br><span class="line"><span class="keyword">let</span> date2 = <span class="type">NSDate</span>.date(fromString: <span class="string">"2015-07-27"</span>, format: <span class="type">DateFormat</span>.<span class="type">Custom</span>(<span class="string">"YYYY-MM-DD"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> date2 &gt; date1 &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span> something</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以通过NSDate的以下一些方法来比较</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isInRange : <span class="type">Bool</span> = date1.isInTimeRange(<span class="string">"11:00"</span>,<span class="string">"15:00"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.isToday()  <span class="comment">// true if represented date is today</span></span><br><span class="line">.isTomorrow()</span><br><span class="line">.isYesterday()</span><br><span class="line">.isThisWeek() <span class="comment">// true if represented date's week is the current week</span></span><br><span class="line">.isSameWeekOf(date: <span class="type">NSDate</span>) <span class="comment">// true if two dates share the same year's week</span></span><br><span class="line">.dateAtWeekStart() <span class="comment">// return the date where current's date week starts</span></span><br><span class="line">.beginningOfDay() <span class="comment">// return the same date of the sender with time set to 00:00:00</span></span><br><span class="line">.endOfDay() <span class="comment">// return the same date of the sender with time set to 23:59:59</span></span><br><span class="line">.beginningOfMonth() <span class="comment">// return the date which represent the first day of the sender date's month</span></span><br><span class="line">.endOfMonth() <span class="comment">// return the date which represent the last day of the sender date's month</span></span><br><span class="line">.beginningOfYear() <span class="comment">// return the date which represent the first day of the sender date's year</span></span><br><span class="line">.endOfYear() <span class="comment">// return the date which represent the last day of the sender date's year</span></span><br><span class="line">.isWeekday() <span class="comment">// true if current sender date is a week day</span></span><br><span class="line">.isWeekend() <span class="comment">// true if current sender date is a weekend day (sat/sun)</span></span><br></pre></td></tr></table></figure><h3 id="NSDate转换为字符串">NSDate转换为字符串</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> string = date.<span class="built_in">toString</span>(format: <span class="type">DateFormat</span>.<span class="type">Custom</span>(<span class="string">"YYYY-MM-DD"</span>))</span><br></pre></td></tr></table></figure><p>也可以在转换方法中指定NSDateFormatterStyle</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> string = date.<span class="built_in">toString</span>(dateStyle: .<span class="type">ShortStyle</span> timeStyle:.<span class="type">LongStyle</span> relativeDate:<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>还可以通过以下方法转换为特定的字符串</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">.toISOString() <span class="comment">//  DateFormat.ISO8601</span></span><br><span class="line">.toShortString() <span class="comment">// short style, both time and date are printed</span></span><br><span class="line">.toMediumString() <span class="comment">// medium style, both time and date are printed</span></span><br><span class="line">.toLongString() <span class="comment">// full style, both time and date are printed</span></span><br><span class="line">.toShortDateString() <span class="comment">// short style, print only date</span></span><br><span class="line">.toShortTimeString() <span class="comment">// short style, print only time</span></span><br><span class="line">.toMediumDateString() <span class="comment">// medium style, print only date</span></span><br><span class="line">.toMediumTimeString() <span class="comment">// medium style, print only time</span></span><br><span class="line">.toLongDateString() <span class="comment">// long style, print only date</span></span><br><span class="line">.toLongTimeString() <span class="comment">// long style, print only time</span></span><br></pre></td></tr></table></figure><p>最后我们还可以输出相对时间的格式，比如输出”2 hours ago”</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="type">NSDate</span>()-<span class="number">2</span>.hour</span><br><span class="line"><span class="keyword">var</span> abb = d.toRelativeString(abbreviated: <span class="literal">true</span>, maxUnits: <span class="number">3</span>)</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"data: <span class="subst">\(abb)</span>"</span>)</span><br></pre></td></tr></table></figure><h2 id="Github">Github</h2><p><a href="https://github.com/malcommac/SwiftDate" target="_blank" rel="external">SwiftDate</a><br><a href="https://github.com/chenyangcun/SwiftDate" target="_blank" rel="external">SwiftDate支持Swift 2.0版本</a></p>]]></content>
    <summary type="html">
    <![CDATA[<p><img src=https://raw.githubusercontent.com/malcommac/SwiftDate/master/assets/logo.png alt=""></p><p><code>SwiftDate</code>是Github上开源的，使用Swift语言编写的NSDate封装库，可以很方便的在Swift中处理日期，比如日期创建，比较，输出等。</p><h2 id=特性>特性</h2><ul><li>支持数学运算符进行日期计算（比如myDate + 2.week + 1.hour)</li><li>支持比较运算符（比如&lt;,&gt;,==,&lt;=,&gt;=）</li><li>快速获取/修改日期各部分内容（比如获取或修改日期中的月份）</li><li>提供通用格式化输出或自定义的格式化输出</li><li>提供一系列.toString方法</li><li>提供简便的方法获取yesterday,tomorrow等</li></ul><h2 id=依赖>依赖</h2><ul><li>iOS 8.0+ / Mac OS X 10.10+</li><li>Xcode 6.4</li><li>Swift 1.2</li></ul><blockquote><p>支持Swift2.0版本，地址在文末的Github段落中</p></blockquote>]]>
    
    </summary>
    
      <category term="NSDate" scheme="https://aswifter.com/tags/NSDate/"/>
    
      <category term="Swift" scheme="https://aswifter.com/tags/Swift/"/>
    
      <category term="SwiftDate" scheme="https://aswifter.com/tags/SwiftDate/"/>
    
      <category term="Swift" scheme="https://aswifter.com/categories/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Atom：Markdown编辑利器]]></title>
    <link href="https://aswifter.com/2015/07/26/atom-markdown-editor/"/>
    <id>https://aswifter.com/2015/07/26/atom-markdown-editor/</id>
    <published>2015-07-26T02:40:24.000Z</published>
    <updated>2015-07-26T10:16:45.000Z</updated>
    <content type="html"><![CDATA[<p><code>Atom</code>是Github开源的文本编辑器，这个编辑器完全是使用Web技术构建的(基于<code>Node-Webkit</code>)。<br><img src="http://image.aswifter.com/atom-editor.png" alt="Atom编辑器"></p><p>我以前是使用<code>Mou</code>和Sublime编辑Markdown博客的，但现在已经是<code>Atom</code>的忠实粉丝，<br>在公司和个人的电脑上都已安装<code>Atom</code>，将它作为主要的文本编辑器。</p><a id="more"></a><h2 id="特性">特性</h2><p>以下几个特性是我选择Atom的主要原因：</p><ul><li><p>Markdown实时预览</p><p>使用Crtl+Shift+M开启</p></li><li><p>Markdown代码高亮</p><p>比Mou的代码高亮效果好多了</p></li><li><p>多文件管理</p><p>Atom提供了文件树列表的功能（IDE中常见）</p></li><li><p>Github紧密结合</p></li><li><p>多平台支持</p><p>Mou只支持Mac OS，</p></li><li><p>Atom插件管理工具<br>使用<code>apm install 插件名称</code>， 可以很方便的安装插件。</p></li></ul><h2 id="常用快捷键">常用快捷键</h2><p>以下是Mac OS平台的常用快捷键：</p><ul><li><p>Command+Shift+P</p><p>打开命令窗口，可以运行各种菜单功能</p></li><li><p>Command + T</p><p>快速多文件切换</p></li><li><p>Ctrl + G</p><p>文件内跳转到指定行</p></li><li><p>Command + F</p><p>文件内查找和替换</p></li><li><p>Command + Shift + F</p><p>多文件查找和替换</p></li><li><p>Command + [</p><p>对选中内容向左缩进</p></li><li><p>Command + ]</p><p>对选中内容向右缩进</p></li></ul><h2 id="下载地址">下载地址</h2><p><a href="https://atom.io/" target="_blank" rel="external">Atom编辑器</a></p>]]></content>
    <summary type="html">
    <![CDATA[<p><code>Atom</code>是Github开源的文本编辑器，这个编辑器完全是使用Web技术构建的(基于<code>Node-Webkit</code>)。<br><img src=http://image.aswifter.com/atom-editor.png alt=Atom编辑器></p><p>我以前是使用<code>Mou</code>和Sublime编辑Markdown博客的，但现在已经是<code>Atom</code>的忠实粉丝，<br>在公司和个人的电脑上都已安装<code>Atom</code>，将它作为主要的文本编辑器。</p>]]>
    
    </summary>
    
      <category term="Atom" scheme="https://aswifter.com/tags/Atom/"/>
    
      <category term="Markdown" scheme="https://aswifter.com/tags/Markdown/"/>
    
      <category term="web" scheme="https://aswifter.com/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio插件推荐——File Grouping Plugin]]></title>
    <link href="https://aswifter.com/2015/07/25/android-file-grouping-plugin/"/>
    <id>https://aswifter.com/2015/07/25/android-file-grouping-plugin/</id>
    <published>2015-07-25T15:55:10.000Z</published>
    <updated>2015-07-25T15:58:35.000Z</updated>
    <content type="html"><![CDATA[<p>Android File Grouping Plugin 是个很实用的插件，它可以在不改变文件目录结构的情况下，将文件按名称进行分组。</p><p><img src="https://github.com/dmytrodanylyk/folding-plugin/raw/master/screenshots/Preview.png" alt=""></p><h2 id="功能描述">功能描述</h2><p>分组规则，按名称中的下划线”_”作为分隔符，将下划线前面的做作为一组</p><blockquote><p>分组不会移动文件<br>分组也不会实际创建目录</p></blockquote><a id="more"></a><p>分组前</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">res/</span><br><span class="line">    layout/</span><br><span class="line">      chat_activity<span class="class">.xml</span></span><br><span class="line">      chat_toolbar<span class="class">.xml</span></span><br><span class="line">      chat_item<span class="class">.xml</span></span><br><span class="line">      chat_share_view<span class="class">.xml</span></span><br><span class="line">      home_activity<span class="class">.xml</span></span><br><span class="line">      home_toolbar<span class="class">.xml</span></span><br><span class="line">      home_fragment_sign_in<span class="class">.xml</span></span><br><span class="line">      home_fragment_sign_up.xml</span><br></pre></td></tr></table></figure><p>分组后</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">res/</span><br><span class="line">    layout/</span><br><span class="line">      chat/</span><br><span class="line">        chat_activity<span class="class">.xml</span></span><br><span class="line">        chat_toolbar<span class="class">.xml</span></span><br><span class="line">        chat_item<span class="class">.xml</span></span><br><span class="line">        chat_share_view<span class="class">.xml</span></span><br><span class="line">      home/</span><br><span class="line">        home_activity<span class="class">.xml</span></span><br><span class="line">        home_toolbar<span class="class">.xml</span></span><br><span class="line">        home_fragment_sign_in<span class="class">.xml</span></span><br><span class="line">        home_fragment_sign_up.xml</span><br></pre></td></tr></table></figure><h2 id="安装和使用">安装和使用</h2><h4 id="安装">安装</h4><p>1.从这里下载最新的 <a href="https://github.com/dmytrodanylyk/folding-plugin/releases" target="_blank" rel="external">File Grouping Plugin</a></p><ol><li>在Android Studio中选择<code>Settings</code>，然后再选择<code>Plugins</code></li><li>点击 <code>Install from disk</code> 按钮，然后选择 <code>Android File Grouping.zip</code></li><li>重启Android Studio</li></ol><h4 id="使用">使用</h4><ol><li>右击资源文件夹（比如layout)</li><li>在选择菜单中选择“Group”</li></ol><h2 id="限制">限制</h2><p>在Android Studio中Android视图模式，不能通过插件修改目录结构样式，<br>所以分组功能在Android视图模式无效的，请在其他视图模式下使用。</p><p><img src="https://github.com/dmytrodanylyk/folding-plugin/raw/master/screenshots/Project.PNG" alt=""></p><h2 id="Github">Github</h2><p><a href="https://github.com/dmytrodanylyk/folding-plugin" target="_blank" rel="external">Android File Grouping Plugin</a></p>]]></content>
    <summary type="html">
    <![CDATA[<p>Android File Grouping Plugin 是个很实用的插件，它可以在不改变文件目录结构的情况下，将文件按名称进行分组。</p><p><img src=https://github.com/dmytrodanylyk/folding-plugin/raw/master/screenshots/Preview.png alt=""></p><h2 id=功能描述>功能描述</h2><p>分组规则，按名称中的下划线”_”作为分隔符，将下划线前面的做作为一组</p><blockquote><p>分组不会移动文件<br>分组也不会实际创建目录</p></blockquote>]]>
    
    </summary>
    
      <category term="Android" scheme="https://aswifter.com/tags/Android/"/>
    
      <category term="Android Studio" scheme="https://aswifter.com/tags/Android-Studio/"/>
    
      <category term="plugin" scheme="https://aswifter.com/tags/plugin/"/>
    
      <category term="Android" scheme="https://aswifter.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Fresco——专为ANDROID加载图片]]></title>
    <link href="https://aswifter.com/2015/07/25/fresco-android-image-library/"/>
    <id>https://aswifter.com/2015/07/25/fresco-android-image-library/</id>
    <published>2015-07-25T15:33:46.000Z</published>
    <updated>2015-07-25T15:37:58.000Z</updated>
    <content type="html"><![CDATA[<p><code>Fresco</code>是来自<code>Facebook</code>开源的Android图片加载库，跟以前的Image Loader相比，提供了很多有用的新特性。</p><h2 id="关于_Fresco">关于 Fresco</h2><p>Fresco 是一个强大的图片加载组件。<br>Fresco 中设计有一个叫做 <em>image pipeline</em> 的模块。它负责从网络，从本地文件系统，本地资源加载图片。为了最大限度节省空间和CPU时间，它含有3级缓存设计（2级内存，1级文件）。<br>Fresco 中设计有一个叫做 <em>Drawees</em> 模块，方便地显示loading图，当图片不再显示在屏幕上时，及时地释放内存和空间占用。<br>Fresco 支持 Android2.3(API level 9) 及其以上系统。</p><a id="more"></a><h2 id="特性">特性</h2><h3 id="内存管理">内存管理<a href="http://fresco-cn.org/#" target="_blank" rel="external"></a></h3><p>解压后的图片，即Android中的Bitmap，占用大量的内存。大的内存占用势必引发更加频繁的GC。<br>在5.0以下，GC将会显著地引发界面卡顿。<br>在5.0以下系统，Fresco将图片放到一个特别的内存区域。当然，在图片不显示的时候，占用的内存会自动被释放。这会使得APP更加流畅，减少因图片内存占用而引发的OOM。<br>Fresco 在低端机器上表现一样出色，你再也不用因图片内存占用而思前想后。</p><h3 id="图片的渐进式呈现">图片的渐进式呈现<a href="http://fresco-cn.org/#" target="_blank" rel="external"></a></h3><p>渐进式的JPEG图片格式已经流行数年了，渐进式图片格式先呈现大致的图片轮廓，然后随着图片下载的继续，呈现逐渐清晰的图片，这对于移动设备，尤其是慢网络有极大的利好，可带来更好的用户体验。<br>Android 本身的图片库不支持此格式，但是Fresco支持。使用时，和往常一样，仅仅需要提供一个图片的URI即可，剩下的事情，Fresco会处理。</p><h3 id="Gif图和WebP格式">Gif图和WebP格式<a href="http://fresco-cn.org/#gif-webp" target="_blank" rel="external"></a></h3><p>是的，支持加载Gif图，支持WebP格式。</p><h3 id="图像的呈现">图像的呈现<a href="http://fresco-cn.org/#" target="_blank" rel="external"></a></h3><p>Fresco 的 Drawees 设计，带来一些有用的特性：</p><ul><li>自定义居中焦点(对人脸等图片显示非常有帮助)</li><li>圆角图，当然圆圈也行。</li><li>下载失败之后，点击重现下载</li><li>自定义占位图，自定义overlay, 或者进度条</li><li>指定用户按压时的overlay</li></ul><h3 id="图像的加载">图像的加载<a href="http://fresco-cn.org/#" target="_blank" rel="external"></a></h3><p>Fresco 的 image pipeline 设计，允许用户在多方面控制图片的加载：</p><ul><li>为同一个图片指定不同的远程路径，或者使用已经存在本地缓存中的图片</li><li>先显示一个低解析度的图片，等高清图下载完之后再显示高清图</li><li>加载完成回调通知</li><li>对于本地图，如有EXIF缩略图，在大图加载完成之前，可先显示缩略图</li><li>缩放或者旋转图片</li><li>处理已下载的图片</li><li>WebP 支持</li></ul><h2 id="了解更多">了解更多</h2><p><a href="https://code.facebook.com/posts/366199913563917" target="_blank" rel="external">相关博客</a>: Fresco的发布<br><a href="http://fresco-cn.org/docs/download-fresco.html" target="_blank" rel="external">下载</a> Fresco<br><a href="http://fresco-cn.org/docs/index.html" target="_blank" rel="external">文档</a><br><a href="https://github.com/facebook/fresco" target="_blank" rel="external">GitHub</a>的源码</p>]]></content>
    <summary type="html">
    <![CDATA[<p><code>Fresco</code>是来自<code>Facebook</code>开源的Android图片加载库，跟以前的Image Loader相比，提供了很多有用的新特性。</p><h2 id=关于_Fresco>关于 Fresco</h2><p>Fresco 是一个强大的图片加载组件。<br>Fresco 中设计有一个叫做 <em>image pipeline</em> 的模块。它负责从网络，从本地文件系统，本地资源加载图片。为了最大限度节省空间和CPU时间，它含有3级缓存设计（2级内存，1级文件）。<br>Fresco 中设计有一个叫做 <em>Drawees</em> 模块，方便地显示loading图，当图片不再显示在屏幕上时，及时地释放内存和空间占用。<br>Fresco 支持 Android2.3(API level 9) 及其以上系统。</p>]]>
    
    </summary>
    
      <category term="Android" scheme="https://aswifter.com/tags/Android/"/>
    
      <category term="Fresco" scheme="https://aswifter.com/tags/Fresco/"/>
    
      <category term="Android" scheme="https://aswifter.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Playground快速练习Swift语法(汇总)]]></title>
    <link href="https://aswifter.com/2015/07/23/learn-swift-with-playground-summary/"/>
    <id>https://aswifter.com/2015/07/23/learn-swift-with-playground-summary/</id>
    <published>2015-07-23T14:28:37.000Z</published>
    <updated>2015-07-23T15:47:26.000Z</updated>
    <content type="html"><![CDATA[<p>最近在学习Swift语言，使用XCode的Playground功能可以很方便地练习Swift语法，<br>本文汇总一下我近期学习Swift语言的一些记录，有兴趣的朋友可以参考我的练习文章，<br>在Playground中快速练习Swift语法。</p><h2 id="准备">准备</h2><ul><li><p>Mac OS系统<br>Swift目前还只能在苹果系统上使用，不管白苹果还是黑苹果，我们需要个Mac OS系统，<br>Swift今年年底会开源，到时候我应该可以在Linux或Windows下使用Swift<br>（开源仅限于语言，在其他平台上开发IOS APP还是不可能的）</p></li><li><p>XCode 7<br>目前XCode 7还是beta版本，如果没有开发者ID，可以从<a href="http://pan.baidu.com/s/1c0lkj0s" target="_blank" rel="external">百度网盘下载</a><br><img src="http://image.aswifter.com/xcode7-start" alt=""></p></li></ul><h2 id="练习">练习</h2><ul><li><a href="http://www.aswifter.com/2015/07/12/learn-swift-with-playground-1/" target="_blank" rel="external">使用Playground快速练习Swift语法—基本语法</a></li><li><a href="http://www.aswifter.com/2015/07/15/learn-swift-with-playground-func/" target="_blank" rel="external">使用Playground快速练习Swift语法—函数的使用</a></li><li><a href="http://www.aswifter.com/2015/07/20/learn-swift-with-playground-closure-enum/" target="_blank" rel="external">使用Playground快速练习Swift语法—闭包和枚举</a></li><li><a href="http://www.aswifter.com/2015/07/21/learn-swift-with-playground-class/" target="_blank" rel="external">使用Playground快速练习Swift语法—类与面向对象</a></li><li><a href="http://www.aswifter.com/2015/07/23/learn-swift-with-playground-extension-protocol/" target="_blank" rel="external">使用Playground快速练习Swift语法—扩展与协议</a></li></ul><a id="more"></a><h2 id="参考">参考</h2><ul><li><p><a href="http://numbbbbb.gitbooks.io/-the-swift-programming-language-/content/" target="_blank" rel="external">The Swift Programming Language 中文版</a><br>中文版的参考资料有些旧了，有些函数的用法需要调整</p></li><li><p><a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309" target="_blank" rel="external">The Swift Programming Language 2.0 官方教程</a><br>Swift2.0 官方教程（英文版），有问题请到这里翻翻</p></li></ul>]]></content>
    <summary type="html">
    <![CDATA[<p>最近在学习Swift语言，使用XCode的Playground功能可以很方便地练习Swift语法，<br>本文汇总一下我近期学习Swift语言的一些记录，有兴趣的朋友可以参考我的练习文章，<br>在Playground中快速练习Swift语法。</p><h2 id=准备>准备</h2><ul><li><p>Mac OS系统<br>Swift目前还只能在苹果系统上使用，不管白苹果还是黑苹果，我们需要个Mac OS系统，<br>Swift今年年底会开源，到时候我应该可以在Linux或Windows下使用Swift<br>（开源仅限于语言，在其他平台上开发IOS APP还是不可能的）</p></li><li><p>XCode 7<br>目前XCode 7还是beta版本，如果没有开发者ID，可以从<a href=http://pan.baidu.com/s/1c0lkj0s>百度网盘下载</a><br><img src=http://image.aswifter.com/xcode7-start alt=""></p></li></ul><h2 id=练习>练习</h2><ul><li><a href="http://www.aswifter.com/2015/07/12/learn-swift-with-playground-1/">使用Playground快速练习Swift语法—基本语法</a></li><li><a href="http://www.aswifter.com/2015/07/15/learn-swift-with-playground-func/">使用Playground快速练习Swift语法—函数的使用</a></li><li><a href="http://www.aswifter.com/2015/07/20/learn-swift-with-playground-closure-enum/">使用Playground快速练习Swift语法—闭包和枚举</a></li><li><a href="http://www.aswifter.com/2015/07/21/learn-swift-with-playground-class/">使用Playground快速练习Swift语法—类与面向对象</a></li><li><a href="http://www.aswifter.com/2015/07/23/learn-swift-with-playground-extension-protocol/">使用Playground快速练习Swift语法—扩展与协议</a></li></ul>]]>
    
    </summary>
    
      <category term="Playground" scheme="https://aswifter.com/tags/Playground/"/>
    
      <category term="Swift" scheme="https://aswifter.com/tags/Swift/"/>
    
      <category term="Swift" scheme="https://aswifter.com/categories/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Playground快速练习Swift语法--扩展与协议]]></title>
    <link href="https://aswifter.com/2015/07/23/learn-swift-with-playground-extension-protocol/"/>
    <id>https://aswifter.com/2015/07/23/learn-swift-with-playground-extension-protocol/</id>
    <published>2015-07-22T17:27:43.000Z</published>
    <updated>2015-07-22T17:34:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="扩展（Extensions）">扩展（Extensions）</h2><p>Swift中的扩展功能可以动态给类增加功能，类似于Javascript中的<em>prototype</em>，<br>这在Swift这样的非脚本语言中竟然也有这样的功能，真是很逆天啊。</p><h3 id="扩展语法">扩展语法</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SomeType</span> </span>&#123;</span><br><span class="line">    <span class="comment">//加入新功能</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展例子">扩展例子</h3><ul><li>单位转换</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Double</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> km: <span class="type">Double</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span> * <span class="number">1000.0</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"25.4千米 =  <span class="subst">\( <span class="number">25.4</span>.km)</span>米"</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>数字转中文</li></ul><figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line">func getChineseNumber(number: <span class="type">Int</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ch = <span class="string">"零一二三四五六七八九"</span></span><br><span class="line">    <span class="keyword">let</span> index = advance(ch.startIndex, number)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">String</span>(ch[index])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extension <span class="type">Int</span> &#123;</span><br><span class="line">    func toChineseNumber() -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="literal">result</span> = <span class="string">""</span></span><br><span class="line">        <span class="keyword">var</span> num  = self</span><br><span class="line">        repeat &#123;</span><br><span class="line">            <span class="literal">result</span> = getChineseNumber(num % <span class="number">10</span>) + <span class="literal">result</span></span><br><span class="line">            num = num / <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> num &gt; <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">result</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1234567890</span>.toChineseNumber()</span><br></pre></td></tr></table></figure><h2 id="协议（Protocol）">协议（Protocol）</h2><p>Swift中的协议类似于Java中的接口（Interface），但Swift中的协议更强大，协议中不仅可以定义方法，<br>也可以定义属性；协议不仅可以作用于类，还可以在结构体和枚举中使用。</p><h3 id="协议语法">协议语法</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">protocol SomeProtocol &#123;</span><br><span class="line">    <span class="comment">// 协议内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>: <span class="typename">SomeSuperClass</span>, <span class="typename">SomeProtocol &#123;</span></span></span><br><span class="line">    <span class="comment">// 类的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="协议例子">协议例子</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">FullyNamed</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fullName: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">greeting</span><span class="params">()</span></span> -&gt; <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">FullyNamed</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fullName: <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">    <span class="keyword">init</span>(fullName:<span class="type">String</span>)&#123;</span><br><span class="line">        <span class="keyword">self</span>.fullName = fullName</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">greeting</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello "</span> + fullName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zhansan = <span class="type">Person</span>(fullName: <span class="string">"张三"</span>)</span><br><span class="line"><span class="built_in">print</span>(zhansan.greeting())</span><br></pre></td></tr></table></figure><h2 id="参考资料">参考资料</h2><p><a href="http://numbbbbb.gitbooks.io/-the-swift-programming-language-/content/" target="_blank" rel="external">The Swift Programming Language 中文版</a><br><a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309" target="_blank" rel="external">The Swift Programming Language 2.0 官方教程</a></p>]]></content>
    <summary type="html">
    <![CDATA[<h2 id=扩展（Extensions）>扩展（Extensions）</h2><p>Swift中的扩展功能可以动态给类增加功能，类似于Javascript中的<em>prototype</em>，<br>这在Swift这样的非脚本语言中竟然也有这样的功能，真是很逆天啊。</p><h3 id=扩展语法>扩展语法</h3><figure class="highlight swift"><table><tr><td class=code><pre><span class=line><span class=class><span class=keyword>extension</span> <span class=title>SomeType</span> </span>&#123;</span><br><span class=line>    <span class=comment>//加入新功能</span></span><br><span class=line>&#125;</span><br></pre></td></tr></table></figure><h3 id=扩展例子>扩展例子</h3><ul><li>单位转换</li></ul><figure class="highlight swift"><table><tr><td class=code><pre><span class=line><span class=class><span class=keyword>extension</span> <span class=title>Double</span> </span>&#123;</span><br><span class=line>    <span class=keyword>var</span> km: <span class=type>Double</span> &#123; <span class=keyword>return</span> <span class=keyword>self</span> * <span class=number>1000.0</span> &#125;</span><br><span class=line>&#125;</span><br><span class=line><span class=built_in>print</span>(<span class=string>"25.4千米 =  <span class=subst>\( <span class=number>25.4</span>.km)</span>米"</span>)</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Playground" scheme="https://aswifter.com/tags/Playground/"/>
    
      <category term="Swift" scheme="https://aswifter.com/tags/Swift/"/>
    
      <category term="Swift" scheme="https://aswifter.com/categories/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Playground快速练习Swift语法--类与面向对象]]></title>
    <link href="https://aswifter.com/2015/07/21/learn-swift-with-playground-class/"/>
    <id>https://aswifter.com/2015/07/21/learn-swift-with-playground-class/</id>
    <published>2015-07-20T18:20:20.000Z</published>
    <updated>2015-07-22T14:12:46.000Z</updated>
    <content type="html"><![CDATA[<p>Swift作为现代语言，面向对象编程是必须支持的。</p><h2 id="类定义和基本使用">类定义和基本使用</h2><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">class <span class="keyword">Person</span>&#123;</span><br><span class="line">    var name: String = <span class="string">""</span></span><br><span class="line">    var age: Int = 0</span><br><span class="line"></span><br><span class="line">    init(name:String,age:Int)&#123;</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    deinit &#123;</span><br><span class="line">        // 执行析构过程</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let p1 = <span class="keyword">Person</span>(name: <span class="string">"张三"</span>, age: 25)</span><br><span class="line">print(p1.name)</span><br></pre></td></tr></table></figure><blockquote><p>init是类的构造函数，deinit为析构函数<br>Swift 会使用引用计数自动释放不再需要的实例以释放资源。<br>但是有时候需要在deinit中执行一些释放代码，比如关闭文件。</p></blockquote><a id="more"></a><h2 id="类-属性的定义和使用">类-属性的定义和使用</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Site</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> domain = <span class="string">""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(domain:<span class="type">String</span>)&#123;</span><br><span class="line">        <span class="keyword">self</span>.domain = domain</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> url: <span class="type">String</span>&#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"http://"</span>+domain;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">set</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> url = newValue</span><br><span class="line">            <span class="keyword">let</span> range = <span class="type">Range</span>&lt;<span class="type">String</span>.<span class="type">Index</span>&gt;(start: url.startIndex,end: <span class="built_in">advance</span>(url.startIndex, <span class="number">7</span>))</span><br><span class="line">            url.removeRange(range)</span><br><span class="line">            <span class="keyword">self</span>.domain = url</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="type">Site</span>(domain: <span class="string">"www.aswifter.com"</span>)</span><br><span class="line"><span class="built_in">print</span>(s1.url)</span><br><span class="line"></span><br><span class="line">s1.url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line"><span class="built_in">print</span>(s1.domain)</span><br></pre></td></tr></table></figure><blockquote><p>set方法中的newValue是默认预设的变量，代表将要设置的值，<br>newValue是常量，不能改变</p></blockquote><h2 id="类-方法的定义和使用">类-方法的定义和使用</h2><h3 id="实例方法">实例方法</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">increment</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">incrementBy</span><span class="params">(amount: Int)</span></span> &#123;</span><br><span class="line">        <span class="built_in">count</span> += amount</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">reset</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter = <span class="type">Counter</span>()</span><br><span class="line"><span class="comment">// 初始计数值是0</span></span><br><span class="line">counter.increment()</span><br><span class="line"><span class="comment">// 计数值现在是1</span></span><br><span class="line">counter.incrementBy(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 计数值现在是6</span></span><br><span class="line">counter.reset()</span><br><span class="line"><span class="comment">// 计数值现在是0</span></span><br></pre></td></tr></table></figure><h3 id="类型方法（静态方法）">类型方法（静态方法）</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">sayHello</span>(<span class="title">name</span>: <span class="title">String</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"hello "</span> +  name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Hello.sayHello(<span class="string">"阳春面"</span>)</span><br></pre></td></tr></table></figure><h2 id="subscript定义和使用">subscript定义和使用</h2><p>subscript有点像‘[]’这个符号的运算符重载。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimesTable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> multiplier: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">init</span>(multiplier: <span class="type">Int</span>)&#123;</span><br><span class="line">        <span class="keyword">self</span>.multiplier = multiplier</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> multiplier * index</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> threeTimesTable = <span class="type">TimesTable</span>(multiplier: <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"3的6倍是<span class="subst">\(threeTimesTable[<span class="number">6</span>])</span>"</span>)</span><br></pre></td></tr></table></figure><p>通过threeTimesTable[6]这样的下标调用，访问subscript定义的方法。</p><h2 id="类-继承">类-继承</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> currentSpeed = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"traveling at <span class="subst">\(currentSpeed)</span> miles per hour"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">makeNoise</span><span class="params">()</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Train</span>: <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hasBasket = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">makeNoise</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Choo Choo"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> train = <span class="type">Train</span>()</span><br><span class="line">train.makeNoise()</span><br></pre></td></tr></table></figure><p>继承的写法与C++相同，使用override关键字重写方法；<br>如果一个方法不想被重写，可以在override加final关键字</p><h2 id="类型判断和转换">类型判断和转换</h2><p>使用is判断类型，使用as转换类型</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vehicles = [</span><br><span class="line">    <span class="type">Vehicle</span>(),</span><br><span class="line">    <span class="type">Train</span>()</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> trainCount = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> vehicles&#123;</span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">is</span> <span class="type">Train</span>&#123;</span><br><span class="line">        ++trainCount</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> train = item <span class="keyword">as</span>? <span class="type">Train</span>&#123;</span><br><span class="line">        train.makeNoise()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"trainCount=<span class="subst">\(trainCount)</span>"</span>)</span><br></pre></td></tr></table></figure><h2 id="嵌套类型（内部类）">嵌套类型（内部类）</h2><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span>&#123;</span></span><br><span class="line">        func hello<span class="function"><span class="params">()</span> -&gt;</span> String&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"hello"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inner = Outer.Inner()</span><br><span class="line"><span class="built_in">print</span>(inner.hello())</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>Swift作为现代语言，面向对象编程是必须支持的。</p><h2 id=类定义和基本使用>类定义和基本使用</h2><figure class="highlight inform7"><table><tr><td class=code><pre><span class=line>class <span class=keyword>Person</span>&#123;</span><br><span class=line>    var name: String = <span class=string>""</span></span><br><span class=line>    var age: Int = 0</span><br><span class=line></span><br><span class=line>    init(name:String,age:Int)&#123;</span><br><span class=line>        self.name = name</span><br><span class=line>        self.age = age</span><br><span class=line>    &#125;</span><br><span class=line></span><br><span class=line>    deinit &#123;</span><br><span class=line>        // 执行析构过程</span><br><span class=line>    &#125;</span><br><span class=line>&#125;</span><br><span class=line></span><br><span class=line>let p1 = <span class=keyword>Person</span>(name: <span class=string>"张三"</span>, age: 25)</span><br><span class=line>print(p1.name)</span><br></pre></td></tr></table></figure><blockquote><p>init是类的构造函数，deinit为析构函数<br>Swift 会使用引用计数自动释放不再需要的实例以释放资源。<br>但是有时候需要在deinit中执行一些释放代码，比如关闭文件。</p></blockquote>]]>
    
    </summary>
    
      <category term="Playground" scheme="https://aswifter.com/tags/Playground/"/>
    
      <category term="Swift" scheme="https://aswifter.com/tags/Swift/"/>
    
      <category term="Swift" scheme="https://aswifter.com/categories/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Playground快速练习Swift语法--闭包和枚举]]></title>
    <link href="https://aswifter.com/2015/07/20/learn-swift-with-playground-closure-enum/"/>
    <id>https://aswifter.com/2015/07/20/learn-swift-with-playground-closure-enum/</id>
    <published>2015-07-20T15:45:06.000Z</published>
    <updated>2015-07-20T15:52:39.000Z</updated>
    <content type="html"><![CDATA[<h2 id="闭包">闭包</h2><p>定义：闭包是自包含的函数代码块，可以在代码中被传递和使用。</p><h3 id="闭包表达式语法">闭包表达式语法</h3><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="function"><span class="params">(parameters)</span> -&gt;</span> returnType <span class="keyword">in</span> </span><br><span class="line">   statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Swift闭包使用{}包含，<em>in</em>语句前面定义好传入函数的参数个数，类型和返回值，<br><em>in</em>语句后面编写实际函数体内容。</p><h3 id="闭包使用例子">闭包使用例子</h3><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王五"</span>]</span><br><span class="line"><span class="keyword">var</span> reversed = names.sort<span class="function"><span class="params">(&#123; (s1: String, s2: String) -&gt; Bool <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> s1 &gt; s2</span><br><span class="line">&#125;)</span></span><br><span class="line"><span class="title">print</span><span class="params">(reversed)</span></span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="闭包类型自动推断">闭包类型自动推断</h3><p>Swift中可以根据上下文自动推断闭包的参数和返回值, Swift2.0中return都可以省略。</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">reversed = names.<span class="function"><span class="title">sort</span><span class="params">( &#123; s1, s2 in s1 &gt; s2 &#125; )</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(reversed)</span></span></span><br></pre></td></tr></table></figure><p>还有更简化的，使用参数名缩写，Swift中使用$0,$1代表第一和第二个参数</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">reversed = names.<span class="function"><span class="title">sort</span><span class="params">( &#123; $<span class="number">0</span> &gt; $<span class="number">1</span> &#125; )</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(reversed)</span></span></span><br></pre></td></tr></table></figure><p>是不是已经很简化了，Swift还有更变态的，利用运算符函数</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">reversed = names.<span class="function"><span class="title">sort</span><span class="params">(&gt;)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(reversed)</span></span></span><br></pre></td></tr></table></figure><p>String类型实现大于号（&gt;）的运算符函数，其参数和返回值就是与我们sort函数要求的一致，<br>所以可以直接传入运算符函数。</p><blockquote><p>有点类似于C++中的运算符重载</p></blockquote><h3 id="尾随闭包">尾随闭包</h3><p>为了增加代码的可读性，我们可以使用闭包的另一种写法，即尾随闭包：</p><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">reversed = names.<span class="keyword">sort</span>() &#123; <span class="variable">$0</span> &gt; <span class="variable">$1</span> &#125; </span><br><span class="line"><span class="keyword">print</span>(reversed)</span><br></pre></td></tr></table></figure><p>使用尾随闭包时，闭包必须是函数的最后一个参数。<br>如果函数只需要一个闭包作为参数，我们还可以省略（）</p><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">reversed = names.<span class="keyword">sort</span>&#123; <span class="variable">$0</span> &gt; <span class="variable">$1</span> &#125; </span><br><span class="line"><span class="keyword">print</span>(reversed)</span><br></pre></td></tr></table></figure><p>Swift官方的一个尾随闭包例子</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> digitNames = [</span><br><span class="line">    <span class="number">0</span>: <span class="string">"Zero"</span>, <span class="number">1</span>: <span class="string">"One"</span>, <span class="number">2</span>: <span class="string">"Two"</span>,   <span class="number">3</span>: <span class="string">"Three"</span>, <span class="number">4</span>: <span class="string">"Four"</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="string">"Five"</span>, <span class="number">6</span>: <span class="string">"Six"</span>, <span class="number">7</span>: <span class="string">"Seven"</span>, <span class="number">8</span>: <span class="string">"Eight"</span>, <span class="number">9</span>: <span class="string">"Nine"</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">16</span>, <span class="number">58</span>, <span class="number">510</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strings = numbers.map &#123;</span><br><span class="line">    (<span class="keyword">var</span> <span class="built_in">number</span>) -&gt; <span class="built_in">String</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">var</span> output = <span class="string">""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">number</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">        output = digitNames[<span class="built_in">number</span> % <span class="number">10</span>]! + output</span><br><span class="line">        <span class="built_in">number</span> /= <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line">&#125;</span><br><span class="line">print(strings)</span><br></pre></td></tr></table></figure><blockquote><p>注意： 字典digitNames下标后跟着一个叹号 (!)，因为字典下标返回一个可选值 (optional value)，使用叹号 (!)会强制解析字典中的值，如果给一个不存在的下标（比如11），该语句就会出错。</p></blockquote><h2 id="枚举">枚举</h2><h3 id="枚举基本使用">枚举基本使用</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> 方向 </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> 东</span><br><span class="line">    <span class="keyword">case</span> 南</span><br><span class="line">    <span class="keyword">case</span> 西</span><br><span class="line">    <span class="keyword">case</span> 北</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> directionToHead = 方向.北</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">directionToHead = .东</span><br></pre></td></tr></table></figure><h3 id="Switch语句使用枚举">Switch语句使用枚举</h3><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">direction = .南</span><br><span class="line"><span class="keyword">switch</span> direction &#123;</span><br><span class="line"><span class="keyword">case</span> .东:</span><br><span class="line">    print(<span class="string">"龙为东方之神"</span>)</span><br><span class="line"><span class="keyword">case</span> .南:</span><br><span class="line">    print(<span class="string">"朱雀为南方之神"</span>)</span><br><span class="line"><span class="keyword">case</span> .西:</span><br><span class="line">    print(<span class="string">"白虎为西方之神"</span>)</span><br><span class="line"><span class="keyword">case</span> .北:</span><br><span class="line">    print(<span class="string">"玄武为北方之神"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实际编程中尽量还是不要用中文作为枚举名吧 :)</p></blockquote><h3 id="枚举相关值">枚举相关值</h3><p>Swift中的枚举的确强大，从来没见过其他语言枚举还有设置相关值的</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Barcode &#123;</span><br><span class="line">    case UPCA(<span class="typename">Int</span>, <span class="typename">Int</span>, <span class="typename">Int</span>)</span><br><span class="line">    case QRCode(String)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable"><span class="keyword">var</span> productBarcode</span> = Barcode.UPCA(<span class="number">8</span>, <span class="number">85909</span>_51226, <span class="number">3</span>)</span><br><span class="line">productBarcode = .QRCode(<span class="string">"ABCDEFGHIJKLMNOP"</span>)</span><br></pre></td></tr></table></figure><p>UPCA类型需要3个Int值创建，QRCode类型需要一个String类型创建</p><h3 id="枚举默认值">枚举默认值</h3><p>枚举初始化的时候可以给每个枚举值设置一个默认值，默认值必须具有相同的类型<br>以下定义一个默认值为Character</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> AS<span class="built_in">CIIControlCharacter</span>: Character &#123;</span><br><span class="line">    <span class="keyword">case</span> Tab = <span class="string">"\t"</span></span><br><span class="line">    <span class="keyword">case</span> LineFeed = <span class="string">"\n"</span></span><br><span class="line">    <span class="keyword">case</span> CarriageReturn = <span class="string">"\r"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用整数作为默认值时，指定第一个后，后续的会自动递增</p><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">enum Planet: Int &#123;</span><br><span class="line">    case <span class="variable">Mercury =</span> <span class="number">1</span>, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">earthsOrder =</span> Planet.Earth.rawValue</span><br><span class="line"><span class="keyword">let</span> <span class="variable">possiblePlanet =</span> Planet(rawValue: <span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>使用枚举的rawValue属性获取默认值；<br>通过参数为rawValue构造函数创建特定默认值的枚举。</p><h3 id="参考资料">参考资料</h3><p><a href="http://numbbbbb.gitbooks.io/-the-swift-programming-language-/content/" target="_blank" rel="external">The Swift Programming Language 中文版</a><br><a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309" target="_blank" rel="external">The Swift Programming Language 2.0 官方教程</a></p>]]></content>
    <summary type="html">
    <![CDATA[<h2 id=闭包>闭包</h2><p>定义：闭包是自包含的函数代码块，可以在代码中被传递和使用。</p><h3 id=闭包表达式语法>闭包表达式语法</h3><figure class="highlight livescript"><table><tr><td class=code><pre><span class=line>&#123; <span class=function><span class=params>(parameters)</span> -&gt;</span> returnType <span class=keyword>in</span> </span><br><span class=line>   statements</span><br><span class=line>&#125;</span><br></pre></td></tr></table></figure><p>Swift闭包使用{}包含，<em>in</em>语句前面定义好传入函数的参数个数，类型和返回值，<br><em>in</em>语句后面编写实际函数体内容。</p><h3 id=闭包使用例子>闭包使用例子</h3><figure class="highlight livescript"><table><tr><td class=code><pre><span class=line><span class=keyword>let</span> names = [<span class=string>"张三"</span>, <span class=string>"李四"</span>, <span class=string>"王五"</span>]</span><br><span class=line><span class=keyword>var</span> reversed = names.sort<span class=function><span class=params>(&#123; (s1: String, s2: String) -&gt; Bool <span class=keyword>in</span></span><br><span class=line>    <span class=keyword>return</span> s1 &gt; s2</span><br><span class=line>&#125;)</span></span><br><span class=line><span class=title>print</span><span class=params>(reversed)</span></span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Playground" scheme="https://aswifter.com/tags/Playground/"/>
    
      <category term="Swift" scheme="https://aswifter.com/tags/Swift/"/>
    
      <category term="Swift" scheme="https://aswifter.com/categories/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 开发最佳实践]]></title>
    <link href="https://aswifter.com/2015/07/17/android-best-practices/"/>
    <id>https://aswifter.com/2015/07/17/android-best-practices/</id>
    <published>2015-07-16T16:46:37.000Z</published>
    <updated>2015-07-16T16:50:57.000Z</updated>
    <content type="html"><![CDATA[<p>从<a href="http://www.futurice.com" target="_blank" rel="external">Futurice</a>公司Android开发者中学到的经验。<br>遵循以下准则，避免重复发明轮子。若您对开发iOS或Windows Phone 有兴趣，<br>请看<a href="https://github.com/futurice/ios-good-practices" target="_blank" rel="external"><strong>iOS Good Practices</strong></a> 和 <a href="https://github.com/futurice/win-client-dev-good-practices" target="_blank" rel="external"><strong>Windows client Good Practices</strong></a> 这两篇文章。</p><h2 id="摘要">摘要</h2><ul><li>使用 Gradle 和它推荐的工程结构</li><li>把密码和敏感数据放在gradle.properties</li><li>不要自己写 HTTP 客户端,使用Volley或OkHttp库</li><li>使用Jackson库解析JSON数据</li><li>避免使用Guava同时使用一些类库来避免<em>65k method limit</em>（一个Android程序中最多能执行65536个方法）</li><li>使用 Fragments来呈现UI视图</li><li>使用 Activities 只是为了管理 Fragments</li><li>Layout 布局是 XMLs代码，组织好它们</li><li>在layoutout XMLs布局时，使用styles文件来避免使用重复的属性</li><li>使用多个style文件来避免单一的一个大style文件</li><li>保持你的colors.xml 简短DRY(不要重复自己)，只是定义调色板</li><li>总是使用dimens.xml DRY(不要重复自己)，定义通用常数</li><li>不要做一个深层次的ViewGroup</li><li>在使用WebViews时避免在客户端做处理，当心内存泄露</li><li>使用Robolectric单元测试，Robotium 做UI测试</li><li>使用Genymotion 作为你的模拟器</li><li>总是使用ProGuard 和 DexGuard混淆来项目</li></ul><a id="more"></a><h3 id="Android_SDK">Android SDK</h3><p>将你的<a href="https://developer.android.com/sdk/installing/index.html?pkg=tools" target="_blank" rel="external">Android SDK</a>放在你的home目录或其他应用程序无关的位置。<br>当安装有些包含SDK的IDE的时候，可能会将SDK放在IDE同一目录下，当你需要升级（或重新安装）IDE或更换的IDE时，会非常麻烦。<br>此外，若果你的IDE是在普通用户，不是在root下运行，还要避免吧SDK放到一下需要sudo权限的系统级别目录下。</p><h3 id="构建系统">构建系统</h3><p>你的默认编译环境应该是<a href="http://tools.android.com/tech-docs/new-build-system" target="_blank" rel="external">Gradle</a>.<br>Ant 有很多限制，也很冗余。使用Gradle，完成以下工作很方便：</p><ul><li>构建APP不同版本的变种</li><li>制作简单类似脚本的任务</li><li>管理和下载依赖</li><li>自定义秘钥</li><li>更多</li></ul><p>同时，Android Gradle插件作为新标准的构建系统正在被Google积极的开发。</p><h3 id="工程结构">工程结构</h3><p>有两种流行的结构：老的Ant &amp; Eclipse ADT 工程结构，和新的Gradle &amp; Android Studio 工程结构，<br>你应该选择新的工程结构，如果你的工程还在使用老的结构，考虑放弃吧，将工程移植到新的结构。</p><p>老的结构:</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">old-structure</span><br><span class="line">├─ assets</span><br><span class="line">├─ libs</span><br><span class="line">├─ res</span><br><span class="line">├─ src</span><br><span class="line">│  └─ com/futurice/project</span><br><span class="line">├─ AndroidManifest<span class="class">.xml</span></span><br><span class="line">├─ build<span class="class">.gradle</span></span><br><span class="line">├─ project<span class="class">.properties</span></span><br><span class="line">└─ proguard-rules.pro</span><br></pre></td></tr></table></figure><p>新的结构</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">new-structure</span><br><span class="line">├─ library-foobar</span><br><span class="line">├─ app</span><br><span class="line">│  ├─ libs</span><br><span class="line">│  ├─ src</span><br><span class="line">│  │  ├─ androidTest</span><br><span class="line">│  │  │  └─ java</span><br><span class="line">│  │  │     └─ com/futurice/project</span><br><span class="line">│  │  └─ main</span><br><span class="line">│  │     ├─ java</span><br><span class="line">│  │     │  └─ com/futurice/project</span><br><span class="line">│  │     ├─ res</span><br><span class="line">│  │     └─ AndroidManifest<span class="class">.xml</span></span><br><span class="line">│  ├─ build<span class="class">.gradle</span></span><br><span class="line">│  └─ proguard-rules<span class="class">.pro</span></span><br><span class="line">├─ build<span class="class">.gradle</span></span><br><span class="line">└─ settings.gradle</span><br></pre></td></tr></table></figure><p>主要的区别在于，新的结构明确的分开了’source sets’ (<code>main</code>,<code>androidTest</code>)，Gradle的一个理念。<br>你可以做到，例如，添加源组‘paid’和‘free’在src中，这将成为您的应用程序的付费和免费的两种模式的源代码。</p><p>你的项目引用第三方项目库时（例如，library-foobar），拥有一个顶级包名<code>app</code>从第三方库项目区分你的应用程序是非常有用的。<br>然后<code>settings.gradle</code>不断引用这些库项目，其中<code>app/build.gradle</code>可以引用。</p><h3 id="Gradle_配置">Gradle 配置</h3><p><strong>常用结构</strong> 参考<a href="http://tools.android.com/tech-docs/new-build-system/user-guide" target="_blank" rel="external">Google’s guide on Gradle for Android</a></p><p><strong>小任务</strong> 除了(shell, Python, Perl, etc)这些脚本语言，你也可以使用Gradle 制作任务。<br>更多信息请参考<a href="http://www.gradle.org/docs/current/userguide/userguide_single.html#N10CBF" target="_blank" rel="external">Gradle’s documentation</a>。</p><p><strong>密码</strong> 在做版本release时你app的 <code>build.gradle</code>你需要定义 <code>signingConfigs</code>.此时你应该避免以下内容：</p><p><em>不要做这个</em> . 这会出现在版本控制中。</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">	release &#123;</span><br><span class="line">		storeFile file(<span class="string">"myapp.keystore"</span>)</span><br><span class="line">		storePassword <span class="string">"password123"</span></span><br><span class="line">		keyAlias <span class="string">"thekey"</span></span><br><span class="line">		keyPassword <span class="string">"password789"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而是，建立一个不加入版本控制系统的<code>gradle.properties</code>文件。</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="setting">KEYSTORE_PASSWORD=<span class="value">password123</span></span></span><br><span class="line"><span class="setting">KEY_PASSWORD=<span class="value">password789</span></span></span><br></pre></td></tr></table></figure><p>那个文件是gradle自动引入的，你可以在<code>buld.gradle</code>文件中使用，例如：</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">	release &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			storeFile file(<span class="string">"myapp.keystore"</span>)</span><br><span class="line">			storePassword KEYSTORE_PASSWORD</span><br><span class="line">			keyAlias <span class="string">"thekey"</span></span><br><span class="line">			keyPassword KEY_PASSWORD</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> InvalidUserDataException(<span class="string">"You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties."</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用 Maven 依赖方案代替使用导入jar包方案</strong> 如果在你的项目中你明确使用率<br>jar文件，那么它们可能成为永久的版本，如<code>2.1.1</code>.下载jar包更新他们是很繁琐的，<br>这个问题Maven很好的解决了，这在Android Gradle构建中也是推荐的方法。你可<br>以指定版本的一个范围，如<code>2.1.+</code>,然后Maven会自动升级到制定的最新版本，例如：</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">	compile <span class="string">'com.netflix.rxjava:rxjava-core:0.19.+'</span></span><br><span class="line">	compile <span class="string">'com.netflix.rxjava:rxjava-android:0.19.+'</span></span><br><span class="line">	compile <span class="string">'com.fasterxml.jackson.core:jackson-databind:2.4.+'</span></span><br><span class="line">	compile <span class="string">'com.fasterxml.jackson.core:jackson-core:2.4.+'</span></span><br><span class="line">	compile <span class="string">'com.fasterxml.jackson.core:jackson-annotations:2.4.+'</span></span><br><span class="line">	compile <span class="string">'com.squareup.okhttp:okhttp:2.0.+'</span></span><br><span class="line">	compile <span class="string">'com.squareup.okhttp:okhttp-urlconnection:2.0.+'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IDEs_and_text_editors">IDEs and text editors</h3><h3 id="IDE集成开发环境和文本编辑器">IDE集成开发环境和文本编辑器</h3><p><strong>无论使用什么编辑器，一定要构建一个良好的工程结构</strong> 编辑器每个人都有自己的<br>选择，让你的编辑器根据工程结构和构建系统运作，那是你自己的责任。</p><p>当下首推<a href="https://developer.android.com/sdk/installing/studio.html" target="_blank" rel="external">Android Studio</a>,因为他是由谷歌开发，最接近Gradle，默认使用最新的工程结构，已经到beta阶段<br>（目前已经有release 1.2了），它就是为Android开发定制的。</p><p>你也可以使用<a href="https://developer.android.com/sdk/installing/index.html?pkg=adt" target="_blank" rel="external">Eclipse ADT</a> ，但是你需要对它进行配置，因为它使用了旧的工程结构<br>和Ant作为构建系统。你甚至可以使用纯文版编辑器如Vim，Sublime Text，或者Emacs。如果那样的话，你需要使用Gardle和<code>adb</code>命令行。如果使用Eclipse集成Gradle<br>不适合你，你只是使用命令行构建工程，或迁移到Android Studio中来吧。</p><p>无论你使用何种开发工具，只要确保Gradle和新的项目结构保持官方的方式构建应用程序，避免你的编辑器配置文件加入到版本控制。例如，避免加入Ant <code>build.xml</code>文件。<br>特别如果你改变Ant的配置，不要忘记保持<code>build.gradle</code>是最新和起作用的。同时，善待其他开发者，不要强制改变他们的开发工具和偏好。</p><h3 id="类库">类库</h3><p><strong><a href="http://wiki.fasterxml.com/JacksonHome" target="_blank" rel="external">Jackson</a></strong> 是一个将java对象转换成JSON与JSON转化java类的类库。<a href="https://code.google.com/p/google-gson/" target="_blank" rel="external">Gson</a><br>是解决这个问题的流行方案，然而我们发现Jackson更高效,因为它支持替代的方法处理JSON:流、内存树模型,和传统JSON-POJO数据绑定。不过，请记住，<br>Jsonkson库比起GSON更大，所以根据你的情况选择，你可能选择GSON来避免APP 65k个方法限制。其它选择: <a href="https://code.google.com/p/json-smart/" target="_blank" rel="external">Json-smart</a> and <a href="https://github.com/RichardHightower/boon/wiki/Boon-JSON-in-five-minutes" target="_blank" rel="external">Boon JSON</a></p><p><strong>网络请求，缓存，图片</strong> 执行请求后端服务器，有几种交互的解决方案，你应该考虑实现你自己的网络客户端。使用 <a href="https://android.googlesource.com/platform/frameworks/volley" target="_blank" rel="external">Volley</a><br>或<a href="http://square.github.io/retrofit/" target="_blank" rel="external">Retrofit</a>。Volley 同时提供图片缓存类。若果你选择使用Retrofit,那么考虑使用<a href="http://square.github.io/picasso/" target="_blank" rel="external">Picasso</a><br>来加载图片和缓存，同时使用<a href="http://square.github.io/okhttp/" target="_blank" rel="external">OkHttp</a>作为高效的网络请求。Retrofit，Picasso和OkHttp都是有同一家公司开发（注：<br>是由<a href="https://github.com/square" target="_blank" rel="external">Square</a> 公司开发），所以它们能很好的在一起运行。<a href="http://stackoverflow.com/questions/24375043/how-to-implement-android-volley-with-okhttp-2-0/24951835#24951835" target="_blank" rel="external">OkHttp 同样可以和Volley在一起使用 Volley</a>.</p><p><strong>RxJava</strong> 是函数式反应性的一个类库，换句话说，能处理异步的事件。<br>这是一个强大的和有前途的模式，同时也可能会造成混淆，因为它是如此的不同。<br>我们建议在使用这个库架构整个应用程序之前要谨慎考虑。<br>有一些项目是使用RxJava完成的，如果你需要帮助可以跟这些人取得联系：<br>Timo Tuominen, Olli Salonen, Andre Medeiros, Mark Voit, Antti Lammi, Vera Izrailit, Juha Ristolainen.<br>我们也写了一些博客：<br><a href="http://blog.futurice.com/tech-pick-of-the-week-rx-for-net-and-rxjava-for-android" target="_blank" rel="external">[1]</a>, <a href="http://blog.futurice.com/top-7-tips-for-rxjava-on-android" target="_blank" rel="external">[2]</a>,<br><a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" target="_blank" rel="external">[3]</a>,<br><a href="http://blog.futurice.com/android-development-has-its-own-swift" target="_blank" rel="external">[4]</a>.</p><p>如若你之前有使用过Rx的经历，开始从API响应应用它。<br>另外，从简单的UI事件处理开始运用，如单击事件或在搜索栏输入事件。<br>若对你的Rx技术有信心，同时想要将它应用到你的整体架构中，那么请在复杂的部分写好Javadocs文档。<br>请记住其他不熟悉RxJava的开发人员，可能会非常难理解整个项目。<br>尽你的的全力帮助他们理解你的代码和Rx。</p><p><strong><a href="https://github.com/evant/gradle-retrolambda" target="_blank" rel="external">Retrolambda</a></strong> 是一个在Android和预JDK8平台上的使用Lambda表达式语法的Java类库。<br>它有助于保持你代码的紧凑性和可读性，特别当你使用如RxJava函数风格编程时。<br>使用它时先安装JDK8，在Android Studio工程结构对话框中把它设置成为SDK路径，同时设置<code>JAVA8_HOME</code>和<code>JAVA7_HOME</code>环境变量，<br>然后在工程根目录下配置 build.gradle：</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">	classpath <span class="string">'me.tatarka:gradle-retrolambda:2.4.+'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时在每个module 的build.gradle中添加</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'retrolambda'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">	compileOptions &#123;</span><br><span class="line">	sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">	targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">retrolambda &#123;</span><br><span class="line">	jdk System.getenv(<span class="string">"JAVA8_HOME"</span>)</span><br><span class="line">	oldJdk System.getenv(<span class="string">"JAVA7_HOME"</span>)</span><br><span class="line">	javaVersion JavaVersion.VERSION_1_7</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Android Studio 提供Java8 lambdas表带是代码提示支持。如果你对lambdas不熟悉，只需参照以下开始学习吧：</p><ul><li>任何只包含一个接口的方法都是”lambda friendly”同时代码可以被折叠成更紧凑的语法</li><li>如果对参数或类似有疑问，就写一个普通的匿名内部类，然后让Android Status为你生成一个lambda。</li></ul><p><strong>当心dex方法数限制，同时避免使用过多的类库</strong> Android apps，当打包成一个dex文件时，有一个65535个应用方法强硬限制<a href="https://medium.com/@rotxed/dex-skys-the-limit-no-65k-methods-is-28e6cb40cf71" target="_blank" rel="external">[1]</a> <a href="http://blog.persistent.info/2014/05/per-package-method-counts-for-androids.html" target="_blank" rel="external">[2]</a> <a href="http://jakewharton.com/play-services-is-a-monolith/" target="_blank" rel="external">[3]</a>。<br>当你突破65k限制之后你会看到一个致命错误。因此，使用一个正常范围的类库文件，同时使用<a href="https://github.com/mihaip/dex-method-counts" target="_blank" rel="external">dex-method-counts</a><br>工具来决定哪些类库可以再65k限制之下使用，特别的避免使用Guava类库，因为它包含超过13k个方法。</p><h3 id="Activities_and_Fragments">Activities and Fragments</h3><p><a href="http://developer.android.com/guide/components/fragments.html" target="_blank" rel="external">Fragments</a>应该作为你实现UI界面默认选择。你可以重复使用Fragments用户接口来<br>组合成你的应用。我们强烈推荐使用Fragments而不是activity来呈现UI界面，理由如下：</p><ul><li><p><strong>提供多窗格布局解决方案</strong> Fragments 的引入主要将手机应用延伸到平板电脑，所以在平板电脑上你可能有A、B两个窗格，但是在手机应用上A、B可能分别充满<br>整个屏幕。如果你的应用在最初就使用了fragments，那么以后将你的应用适配到其他不同尺寸屏幕就会非常简单。</p></li><li><p><strong>屏幕间数据通信</strong> 从一个Activity发送复杂数据(例如Java对象)到另外一个Activity，Android的API并没有提供合适的方法。不过使用Fragment，你可以使用<br>一个activity实例作为这个activity子fragments的通信通道。即使这样比Activity与Activity间的通信好，你也想考虑使用Event Bus架构，使用如<br><a href="https://square.github.io/otto/" target="_blank" rel="external">Otto</a> 或者 <a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">greenrobot EventBus</a>作为更简洁的实现。<br>如果你希望避免添加另外一个类库，RxJava同样可以实现一个Event Bus。</p></li></ul><ul><li><p><strong>Fragments 一般通用的不只有UI</strong> 你可以有一个没有界面的fragment作为Activity提供后台工作。<br>进一步你可以使用这个特性来创建一个<a href="http://stackoverflow.com/questions/12363790/how-many-activities-vs-fragments/12528434#12528434" target="_blank" rel="external">fragment 包含改变其它fragment的逻辑</a><br>而不是把这个逻辑放在activity中。</p></li><li><p><strong>甚至ActionBar 都可以使用内部fragment来管理</strong> 你可以选择使用一个没有UI界面的fragment来专门管理ActionBar,或者你可以选择使用在每个Fragment中<br>添加它自己的action 来作为父Activity的ActionBar.<a href="http://www.grokkingandroid.com/adding-action-items-from-within-fragments/" target="_blank" rel="external">参考</a>.</p></li></ul><p>很不幸，我们不建议广泛的使用嵌套的<a href="https://developer.android.com/about/versions/android-4.2.html#NestedFragments" target="_blank" rel="external">fragments</a>，因为<br>有时会引起<a href="http://delyan.me/android-s-matryoshka-problem/" target="_blank" rel="external">matryoshka bugs</a>。我们只有当它有意义(例如，在水平滑动的ViewPager在<br>像屏幕一样fragment中)或者他的确是一个明智的选择的时候才广泛的使用fragment。</p><p>在一个架构级别，你的APP应该有一个顶级的activity来包含绝大部分业务相关的fragment。你也可能还有一些辅助的activity ，这些辅助的activity与主activity<br>通信很简单限制在这两种方法<br><a href="http://developer.android.com/reference/android/content/Intent.html#setData(android.net.Uri" target="_blank" rel="external"><code>Intent.setData()</code></a>) 或 <a href="http://developer.android.com/reference/android/content/Intent.html#setAction(java.lang.String" target="_blank" rel="external"><code>Intent.setAction()</code></a>)或类似的方法。</p><h3 id="Java_包结构">Java 包结构</h3><p>Android 应用程序在架构上大致是Java中的<a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" target="_blank" rel="external">Model-View-Controller</a>结构。<br>在Android 中 Fragment和Activity通常上是控制器类(<a href="http://www.informit.com/articles/article.aspx?p=2126865" target="_blank" rel="external">http://www.informit.com/articles/article.aspx?p=2126865</a>).<br>换句话说，他们是用户接口的部分，同样也是Views视图的部分。</p><p>正是因为如此，才很难严格的将fragments (或者 activities) 严格的划分成 控制器controlloers还是视图 views。<br>最还是将它们放在自己单独的 <code>fragments</code> 包中。只要你遵循之前提到的建议，Activities 则可以放在顶级目录下。<br>若果你规划有2到3个以上的activity，那么还是同样新建一个<code>activities</code>包吧。</p><p>然而，这种架构可以看做是另一种形式的MVC，<br>包含要被解析API响应的JSON数据，来填充的POJO的<code>models</code>包中。<br>和一个<code>views</code>包来包含你的自定义视图、通知、导航视图，widgets等等。<br>适配器Adapter是在数据和视图之间。然而他们通常需要通过<code>getView()</code>方法来导出一些视图，<br>所以你可以将<code>adapters</code>包放在<code>views</code>包里面。</p><p>一些控制器角色的类是应用程序级别的，同时是接近系统的。<br>这些类放在<code>managers</code>包下面。<br>一些繁杂的数据处理类，比如说”DateUtils”,放在<code>utils</code>包下面。<br>与后端交互负责网络处理类，放在<code>network</code>包下面。</p><p>总而言之，以最接近用户而不是最接近后端去安排他们。</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">com<span class="class">.futurice</span><span class="class">.project</span></span><br><span class="line">├─ network</span><br><span class="line">├─ models</span><br><span class="line">├─ managers</span><br><span class="line">├─ utils</span><br><span class="line">├─ fragments</span><br><span class="line">└─ views</span><br><span class="line">   ├─ adapters</span><br><span class="line">   ├─ actionbar</span><br><span class="line">   ├─ widgets</span><br><span class="line">   └─ notifications</span><br></pre></td></tr></table></figure><h3 id="资源文件_Resources">资源文件 Resources</h3><ul><li><strong>命名</strong> 遵循前缀表明类型的习惯，形如<code>type_foo_bar.xml</code>。例如：<code>fragment_contact_details.xml</code>,<code>view_primary_button.xml</code>,<code>activity_main.xml</code>.</li></ul><p><strong>组织布局文件</strong> 若果你不确定如何排版一个布局文件，遵循一下规则可能会有帮助。</p><ul><li>每一个属性一行，缩进4个空格</li><li><code>android:id</code> 总是作为第一个属性</li><li><code>android:layout_****</code> 属性在上边</li><li><code>style</code> 属性在底部</li><li>关闭标签<code>/&gt;</code>单独起一行，有助于调整和添加新的属性</li><li>考虑使用<a href="http://tools.android.com/tips/layout-designtime-attributes" target="_blank" rel="external">Designtime attributes 设计时布局属性</a>，Android Studio已经提供支持，而不是硬编码<code>android:text</code><br>(译者注：墙内也可以参考stormzhang的这篇博客<a href="http://stormzhang.com/devtools/2015/01/11/android-studio-tips1/" target="_blank" rel="external">链接</a>)。</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">	<span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">	<span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">	<span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">	<span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">	<span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">	&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">		<span class="attribute">android:id</span>=<span class="value">"@+id/name"</span></span><br><span class="line">		<span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">		<span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">		<span class="attribute">android:layout_alignParentRight</span>=<span class="value">"true"</span></span><br><span class="line">		<span class="attribute">android:text</span>=<span class="value">"@string/name"</span></span><br><span class="line">		<span class="attribute">style</span>=<span class="value">"@style/FancyText"</span></span><br><span class="line">		/&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="title">include</span> <span class="attribute">layout</span>=<span class="value">"@layout/reusable_part"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>作为一个经验法则,<code>android:layout_****</code>属性应该在 layout XML 中定义,同时其它属性<code>android:****</code> 应放在 styler XML中。此规则也有例外，不过大体工作<br>的很好。这个思想整体是保持layout属性(positioning, margin, sizing) 和content属性在布局文件中，同时将所有的外观细节属性（colors, padding, font）放<br>在style文件中。</p><p>例外有以下这些:</p><ul><li><code>android:id</code> 明显应该在layout文件中</li><li>layout文件中<code>android:orientation</code>对于一个<code>LinearLayout</code>布局通常更有意义</li><li><code>android:text</code> 由于是定义内容，应该放在layout文件中</li><li>有时候将<code>android:layout_width</code> 和 <code>android:layout_height</code>属性放到一个style中作为一个通用的风格中更有意义，但是默认情况下这些应该放到layout文件中。</li></ul><p><strong>使用styles</strong> 几乎每个项目都需要适当的使用style文件，因为对于一个视图来说有一个重复的外观是很常见的。<br>在应用中对于大多数文本内容，最起码你应该有一个通用的style文件，例如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">style</span> <span class="attribute">name</span>=<span class="value">"ContentText"</span>&gt;</span><span class="css"></span><br><span class="line">	&lt;<span class="tag">item</span> <span class="tag">name</span>="<span class="rule"><span class="attribute">android</span>:<span class="value">textSize<span class="string">"&gt;@dimen/font_normal&lt;/item&gt;</span><br><span class="line">	&lt;item name="</span>android:textColor<span class="string">"&gt;@color/basic_black&lt;/item&gt;</span><br><span class="line"></span></span></span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>应用到TextView 中:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">	<span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">	<span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">	<span class="attribute">android:text</span>=<span class="value">"@string/price"</span></span><br><span class="line">	<span class="attribute">style</span>=<span class="value">"@style/ContentText"</span></span><br><span class="line">	/&gt;</span></span><br></pre></td></tr></table></figure><p>你或许需要为按钮控件做同样的事情，不要停止在那里。将一组相关的和重复<code>android:****</code>的属性放到一个通用的style中。</p><p><strong>将一个大的style文件分割成多个文件</strong> 你可以有多个<code>styles.xml</code> 文件。Android SDK支持其它文件，<code>styles</code>这个文件名称并没有作用，起作用的是在文件<br>里xml的<code>&lt;style&gt;</code>标签。因此你可以有多个style文件<code>styles.xml</code>,<code>style_home.xml</code>,<code>style_item_details.xml</code>,<code>styles_forms.xml</code>。<br>不用于资源文件路径需要为系统构建起的有意义，在<code>res/values</code>目录下的文件可以任意命名。</p><p><strong><code>colors.xml</code>是一个调色板</strong> 在你的<code>colors.xml</code>文件中应该只是映射颜色的名称一个RGBA值，而没有其它的。不要使用它为不同的按钮来定义RGBA值。</p><p><em>不要这样做</em></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">resources</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"button_foreground"</span>&gt;</span>#FFFFFF<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"button_background"</span>&gt;</span>#2A91BD<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"comment_background_inactive"</span>&gt;</span>#5F5F5F<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"comment_background_active"</span>&gt;</span>#939393<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"comment_foreground"</span>&gt;</span>#FFFFFF<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"comment_foreground_important"</span>&gt;</span>#FF9D2F<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	...</span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"comment_shadow"</span>&gt;</span>#323232<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用这种格式，你会非常容易的开始重复定义RGBA值，这使如果需要改变基本色变的很复杂。同时，这些定义是跟一些环境关联起来的，如<code>button</code>或者<code>comment</code>,<br>应该放到一个按钮风格中，而不是在<code>color.xml</code>文件中。</p><p>相反，这样做:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- grayscale --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"white"</span>     &gt;</span>#FFFFFF<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"gray_light"</span>&gt;</span>#DBDBDB<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"gray"</span>      &gt;</span>#939393<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"gray_dark"</span> &gt;</span>#5F5F5F<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"black"</span>     &gt;</span>#323232<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- basic colors --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"green"</span>&gt;</span>#27D34D<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"blue"</span>&gt;</span>#2A91BD<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"orange"</span>&gt;</span>#FF9D2F<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"red"</span>&gt;</span>#FF432F<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>向应用设计者那里要这个调色板，名称不需要跟”green”, “blue”, 等等相同。<br>“brand_primary”, “brand_secondary”, “brand_negative” 这样的名字也是完全可以接受的。<br>像这样规范的颜色很容易修改或重构，会使应用一共使用了多少种不同的颜色变得非常清晰。<br>通常一个具有审美价值的UI来说，减少使用颜色的种类是非常重要的。</p><p><strong>像对待colors.xml一样对待dimens.xml文件</strong> 与定义颜色调色板一样，你同时也应该定义一个空隙间隔和字体大小的“调色板”。<br>一个好的例子，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- font sizes --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"font_larger"</span>&gt;</span>22sp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"font_large"</span>&gt;</span>18sp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"font_normal"</span>&gt;</span>15sp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"font_small"</span>&gt;</span>12sp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- typical spacing between two views --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"spacing_huge"</span>&gt;</span>40dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"spacing_large"</span>&gt;</span>24dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"spacing_normal"</span>&gt;</span>14dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"spacing_small"</span>&gt;</span>10dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"spacing_tiny"</span>&gt;</span>4dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- typical sizes of views --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"button_height_tall"</span>&gt;</span>60dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"button_height_normal"</span>&gt;</span>40dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">dimen</span> <span class="attribute">name</span>=<span class="value">"button_height_short"</span>&gt;</span>32dp<span class="tag">&lt;/<span class="title">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>布局时在写 margins 和 paddings 时，你应该使用<code>spacing_****</code>尺寸格式来布局，而不是像对待String字符串一样直接写值。<br>这样写会非常有感觉，会使组织和改变风格或布局是非常容易。</p><p><strong>避免深层次的视图结构</strong> 有时候为了摆放一个视图，你可能尝试添加另一个LinearLayout。你可能使用这种方法解决：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">	<span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">	<span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">	<span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">	&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="title">RelativeLayout</span></span><br><span class="line">		<span class="attribute">...</span></span><br><span class="line">		&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">			<span class="attribute">...</span></span><br><span class="line">			&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">				<span class="attribute">...</span></span><br><span class="line">				&gt;</span></span><br><span class="line"></span><br><span class="line">				<span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">					<span class="attribute">...</span></span><br><span class="line">					&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="title">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>即使你没有非常明确的在一个layout布局文件中这样使用，如果你在Java文件中从一个view inflate（这个inflate翻译不过去，大家理解就行） 到其他views当中，也是可能会发生的。</p><p>可能会导致一系列的问题。你可能会遇到性能问题，因为处理起需要处理一个复杂的UI树结构。<br>还可能会导致以下更严重的问题<a href="http://stackoverflow.com/questions/2762924/java-lang-stackoverflow-error-suspected-too-many-views" target="_blank" rel="external">StackOverflowError</a>.</p><p>因此尽量保持你的视图tree：学习如何使用<a href="https://developer.android.com/guide/topics/ui/layout/relative.html" target="_blank" rel="external">RelativeLayout</a>,<br>如何 <a href="http://developer.android.com/training/improving-layouts/optimizing-layout.html" target="_blank" rel="external">optimize 你的布局</a> 和如何使用<br><a href="http://stackoverflow.com/questions/8834898/what-is-the-purpose-of-androids-merge-tag-in-xml-layouts" target="_blank" rel="external"><code>&lt;merge&gt;</code> 标签</a>.</p><p><strong>小心关于WebViews的问题.</strong> 如果你必须显示一个web视图，<br>比如说对于一个新闻文章，避免做客户端处理HTML的工作，<br>最好让后端工程师协助，让他返回一个 “<em>纯</em>“ HTML。<br><a href="http://stackoverflow.com/questions/3130654/memory-leak-in-webview" target="_blank" rel="external">WebViews 也能导致内存泄露</a><br>当保持引他们的Activity，而不是被绑定到ApplicationContext中的时候。<br>当使用简单的文字或按钮时，避免使用WebView，这时使用TextView或Buttons更好。</p><h3 id="测试框架">测试框架</h3><p>Android SDK的测试框架还处于初级阶段，特别是关于UI测试方面。Android Gradle<br>目前实现了一个叫<a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Testing" target="_blank" rel="external"><code>connectedAndroidTest</code></a>的测试，<br>它<a href="http://developer.android.com/reference/android/test/package-summary.html" target="_blank" rel="external">使用一个JUnit 为Android提供的扩展插件 extension of JUnit with helpers for Android</a>.可以跑你生成的JUnit测试，</p><p><strong>只当做单元测试时使用 <a href="http://robolectric.org/" target="_blank" rel="external">Robolectric</a> ，views 不用</strong><br>它是一个最求提供”不连接设备的”为了加速开发的测试，<br>非常时候做 models 和 view models 的单元测试。<br>然而，使用Robolectric测试时不精确的，也不完全对UI测试。<br>当你对有关动画的UI元素、对话框等，测试时会有问题，<br>这主要是因为你是在 “在黑暗中工作”（在没有可控的界面情况下测试）</p><p><strong><a href="https://code.google.com/p/robotium/" target="_blank" rel="external">Robotium</a> 使写UI测试非常简单。</strong> 对于UI测试你不需 Robotium 跑与设备连接的测试。<br>但它可能会对你有益，是因为它有许多来帮助类的获得和分析视图，控制屏幕。<br>测试用例看起来像这样简单：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">solo.sendKey(Solo.MENU);</span><br><span class="line">solo.clickOnText(<span class="string">"More"</span>); <span class="comment">// searches for the first occurence of "More" and clicks on it</span></span><br><span class="line">solo.clickOnText(<span class="string">"Preferences"</span>);</span><br><span class="line">solo.clickOnText(<span class="string">"Edit File Extensions"</span>);</span><br><span class="line">Assert.assertTrue(solo.searchText(<span class="string">"rtf"</span>));</span><br></pre></td></tr></table></figure><h3 id="模拟器">模拟器</h3><p>如果你全职开发Android App,那么买一个<a href="http://www.genymotion.com/" target="_blank" rel="external">Genymotion emulator</a>license吧。<br>Genymotion 模拟器运行更快的秒帧的速度，比起典型的AVD模拟器。他有演示你APP的工具，高质量的模拟网络连接，GPS位置，等等。它同时还有理想的连接测试。<br>你若涉及适配使用很多不同的设备，买一个Genymotion 版权是比你买很多真设备便宜多的。</p><p>注意：Genymotion模拟器没有装载所有的Google服务，如Google Play Store和Maps。你也可能需<br>要测试Samsung指定的API，若这样的话你还是需要购买一个真实的Samsung设备。</p><h3 id="混淆配置">混淆配置</h3><p><a href="http://proguard.sourceforge.net/" target="_blank" rel="external">ProGuard</a> 是一个在Android项目中广泛使用的压缩和混淆打包的源码的工具。</p><p>你是否使用ProGuard取决你项目的配置，当你构建一个release版本的apk时，通常你应该配置gradle文件。</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">	debug &#123;</span><br><span class="line">		minifyEnabled <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">	release &#123;</span><br><span class="line">		signingConfig signingConfigs.release</span><br><span class="line">		minifyEnabled <span class="literal">true</span></span><br><span class="line">		proguardFiles <span class="string">'proguard-rules.pro'</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了决定哪些代码应该被保留，哪些代码应该被混淆，你不得不指定一个或多个实体类在你的代码中。<br>这些实体应该是指定的类包含main方法，applets，midlets，activities，等等。<br>Android framework 使用一个默认的配置文件，可以在<code>SDK_HOME/tools/proguard/proguard-android.txt</code><br>目录下找到。自定义的工程指定的 project-specific 混淆规则，如在<code>my-project/app/proguard-rules.pro</code>中定义，<br>会被添加到默认的配置中。</p><p>关于 ProGuard 一个普遍的问题，是看应用程序是否崩溃并报<code>ClassNotFoundException</code> 或者 <code>NoSuchFieldException</code> 或类似的异常，<br>即使编译是没有警告并运行成功。<br>这意味着以下两种可能：</p><ol><li>ProGuard 已经移除了类，枚举，方法，成员变量或注解，考虑是否是必要的。</li><li>ProGuard 混淆了类，枚举，成员变量的名称，但是这些名字又被拿原始名称使用了，比如通过Java的反射。</li></ol><p>检查<code>app/build/outputs/proguard/release/usage.txt</code>文件看有问题的对象是否被移除了。<br>检查 <code>app/build/outputs/proguard/release/mapping.txt</code> 文件看有问题的对象是否被混淆了。</p><p>In order to prevent ProGuard from <em>stripping away</em> needed classes or class members, add a <code>keep</code> options to your proguard config:<br>以防 ProGuard <em>剥离</em> 需要的类和类成员，添加一个 <code>keep</code>选项在你的 proguard 配置文件中：<br><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby">keep <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">futurice</span>.<span class="title">project</span>.<span class="title">MyClass</span> &#123; *;</span> &#125;</span></span><br></pre></td></tr></table></figure></p><p>防止 ProGuard <em>混淆</em> 一些类和成员，添加 <code>keepnames</code>:<br><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby">keepnames <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">futurice</span>.<span class="title">project</span>.<span class="title">MyClass</span> &#123; *;</span> &#125;</span></span><br></pre></td></tr></table></figure></p><p>查看<a href="https://github.com/futurice/android-best-practices/blob/master/templates/rx-architecture/app/proguard-rules.pro" target="_blank" rel="external">this template’s ProGuard config</a> 中的一些例子。<br>更多例子请参考<a href="http://proguard.sourceforge.net/#manual/examples.html" target="_blank" rel="external">Proguard</a>。</p><p><strong>在构建项目之初，发布一个版本</strong> 来检查ProGuard规则是否正确的保持了重要的部分。<br>同时无论何时你添加了新的类库，做一个发布版本，同时apk在设备上跑起来测试一下。<br>不要等到你的app要发布 “1.0”版本了才做版本发布，那时候你可能会碰到好多意想不到的异常，需要一些时间去修复他们。</p><p><strong>Tips</strong>每次发布新版本都要写 <code>mapping.txt</code>。每发布一个版本，如果用户遇到一个bug，同时提交了一个混淆过的堆栈跟踪。<br>通过保留<code>mapping.txt</code>文件，来确定你可以调试的问题。</p><p><strong>DexGuard</strong> 若果你需要核心工具来优化，和专门混淆的发布代码，考虑使用<a href="http://www.saikoa.com/dexguard" target="_blank" rel="external">DexGuard</a>,<br>一个商业软件，ProGuard 也是有他们团队开发的。<br>它会很容易将Dex文件分割，来解决65K个方法限制问题。</p><h3 id="致谢">致谢</h3><p>感谢Antti Lammi, Joni Karppinen, Peter Tackage, Timo Tuominen, Vera Izrailit, Vihtori Mäntylä, Mark Voit, Andre Medeiros, Paul Houghton 这些人和Futurice 开发者分享他们的Android开发经验。</p><h3 id="License">License</h3><p><a href="www.futurice.com">Futurice Oy</a><br>Creative Commons Attribution 4.0 International (CC BY 4.0)</p><h3 id="Translation">Translation</h3><p>Translated to Chinese by <a href="https://github.com/andyiac" target="_blank" rel="external">andyiac</a></p>]]></content>
    <summary type="html">
    <![CDATA[<p>从<a href=http://www.futurice.com>Futurice</a>公司Android开发者中学到的经验。<br>遵循以下准则，避免重复发明轮子。若您对开发iOS或Windows Phone 有兴趣，<br>请看<a href=https://github.com/futurice/ios-good-practices><strong>iOS Good Practices</strong></a> 和 <a href=https://github.com/futurice/win-client-dev-good-practices><strong>Windows client Good Practices</strong></a> 这两篇文章。</p><h2 id=摘要>摘要</h2><ul><li>使用 Gradle 和它推荐的工程结构</li><li>把密码和敏感数据放在gradle.properties</li><li>不要自己写 HTTP 客户端,使用Volley或OkHttp库</li><li>使用Jackson库解析JSON数据</li><li>避免使用Guava同时使用一些类库来避免<em>65k method limit</em>（一个Android程序中最多能执行65536个方法）</li><li>使用 Fragments来呈现UI视图</li><li>使用 Activities 只是为了管理 Fragments</li><li>Layout 布局是 XMLs代码，组织好它们</li><li>在layoutout XMLs布局时，使用styles文件来避免使用重复的属性</li><li>使用多个style文件来避免单一的一个大style文件</li><li>保持你的colors.xml 简短DRY(不要重复自己)，只是定义调色板</li><li>总是使用dimens.xml DRY(不要重复自己)，定义通用常数</li><li>不要做一个深层次的ViewGroup</li><li>在使用WebViews时避免在客户端做处理，当心内存泄露</li><li>使用Robolectric单元测试，Robotium 做UI测试</li><li>使用Genymotion 作为你的模拟器</li><li>总是使用ProGuard 和 DexGuard混淆来项目</li></ul>]]>
    
    </summary>
    
      <category term="Android" scheme="https://aswifter.com/tags/Android/"/>
    
      <category term="Android" scheme="https://aswifter.com/categories/Android/"/>
    
  </entry>
  
</feed>